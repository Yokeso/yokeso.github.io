<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yokeso</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yokeso.github.io/"/>
  <updated>2023-04-01T11:15:02.099Z</updated>
  <id>http://yokeso.github.io/</id>
  
  <author>
    <name>BigtreeLiu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Udev规则修改学习</title>
    <link href="http://yokeso.github.io/2023/03/12/Udev%E8%A7%84%E5%88%99%E4%BF%AE%E6%94%B9%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yokeso.github.io/2023/03/12/Udev%E8%A7%84%E5%88%99%E4%BF%AE%E6%94%B9%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-03-12T02:03:41.000Z</published>
    <updated>2023-04-01T11:15:02.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Udev规则修改学习"><a href="#Udev规则修改学习" class="headerlink" title="Udev规则修改学习"></a>Udev规则修改学习</h1><h2 id="0x01-udev简介"><a href="#0x01-udev简介" class="headerlink" title="0x01 udev简介"></a>0x01 udev简介</h2><p>udev的全称是Dynamic device management,也就是曾经的<code>devfs</code>的继任者。<code>udev</code>的主要目的是为动态<code>/dev</code>目录提供用户空间的解决方案，以及实现持久的设备命名。</p><p>在典型的linux系统上，<code>/dev</code>目录主要用于存储类似文件的设备节点，在这个目录下的每个节点都指向系统设备的一部分，这部分可能存在，也可能不存在。用户的应用程序就是通过使用这些设备节点来与系统的硬件进行交互的。这里引用中文文档中的一些原话</p><blockquote><p>最初的/dev目录只是用可能出现在系统中的每个设备填充。由于这个原因，/dev目录通常非常大。devfs提供了一种更易于管理的方法(值得注意的是，它只使用插入系统的硬件来填充/dev)，以及一些其他功能，但是系统被证明存在一些难以修复的问题。</p><p>udev是管理/dev目录的“新”方法，旨在清除以前/dev实现中的一些问题，并提供一个健壮的前进路径。为了创建和命名与系统中存在的设备相对应的/dev设备节点，udev依赖于sysfs提供的信息与用户提供的规则进行匹配。</p></blockquote><p>那说了这么多，udev的真正作用是什么呢？对于标准设备而言，udev很可能是一个永远触碰不到的东西。但是对于新的或者外来的设备而言，如果不进行配置修改，这些设备可能会导致无法访问。或者说linux本身会给这些设备分配不恰当的名字，所属或者权限来创建设备文件。包括RS-232串口以及音视频设备的属组或者权限都可以在udev中进行更改。</p><h2 id="0x02-规则文件和语义"><a href="#0x02-规则文件和语义" class="headerlink" title="0x02 规则文件和语义"></a>0x02 规则文件和语义</h2><h3 id="0x21-规则文件介绍"><a href="#0x21-规则文件介绍" class="headerlink" title="0x21 规则文件介绍"></a>0x21 规则文件介绍</h3><p>在决定如何命名设备以及执行哪些附加操作时，udev会读取一系列的规则文件。这些文件保存在<code>/etc/udev/rules.d</code>中。文件的后缀名均为<code>.rules</code>。</p><p>其中要注意的是<code>50-udev.rules</code>。这个文件中存放的是默认的udev存储规则，所以用户不应该将规则直接写入这个文件中。在这个文件中包含了一些示例以及一些证明<code>devfs</code>样式<code>/dev</code>布局的默认规则。</p><p><code>rules.d</code>中的文件按照此法顺序解析。所以在某些情况下，解析的规则非常重要。这里还是引用一下文档中的说法</p><blockquote><p>通常，您希望在缺省值之前解析您自己的规则，因此我建议您在/etc/udev/rules.d/10-local.rules上创建一个文件，并将所有规则写入该文件。</p></blockquote><p>在规则文件中，以<code>#</code>开头的行被视为注释。每隔一个非空行就是一个规则，规则之间不能跨越多行。</p><p>一个设备可以由多个规则机型匹配。udev在发现匹配规则时不会停止处理，会继续搜索并且尝试应用它所知道的每个规则。</p><h3 id="0x22-语法规则"><a href="#0x22-语法规则" class="headerlink" title="0x22 语法规则"></a>0x22 语法规则</h3><p>每个规则都由一系列的<code>key-value</code>对组成。这些对之间由都好分割。识别规则所适用设备的条件是键的匹配。一个规则至少要有一个匹配键和一个赋值键。</p><p>下面举一个简单的例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KERNEL==&quot;hdb&quot;,NAME=&quot;my_spare_disk&quot;</span><br></pre></td></tr></table></figure><p>这里包括了一个匹配键和一个赋值键。匹配键使用的相等运算符进行匹配<code>==</code>（后续会进行详细介绍）。赋值键通过赋值运算符<code>=</code>进行值的赋予。</p><blockquote><p>注意udev不支持任何形式的行延续。不要在您的规则中插入任何换行符，因为这将导致udev将您的一个规则视为多个规则，并且不能按预期工作。</p></blockquote><h3 id="0x23-udev-key-value操作符"><a href="#0x23-udev-key-value操作符" class="headerlink" title="0x23 udev key/value操作符"></a>0x23 udev key/value操作符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">匹配或赋值</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:center">匹配</td><td style="text-align:center">相等比较</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">匹配</td><td style="text-align:center">不等比较</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">分配一个特定的值给该键，他可以覆盖之前的赋值。</td></tr><tr><td style="text-align:center">+=</td><td style="text-align:center">赋值</td><td style="text-align:center">追加特定的值给已经存在的键</td></tr><tr><td style="text-align:center">:=      赋值       。</td><td style="text-align:center">赋值</td><td style="text-align:center">分配一个特定的值给该键，后面的规则不可能覆盖它</td></tr></tbody></table></div><h3 id="0x24-udev规则匹配键"><a href="#0x24-udev规则匹配键" class="headerlink" title="0x24 udev规则匹配键"></a>0x24 udev规则匹配键</h3><blockquote><p>ACTION： 事件 (uevent) 的行为，例如：add( 添加设备 )、remove( 删除设备 )。</p><p>KERNEL： 内核设备名称，例如：sda, cdrom。</p><p>DEVPATH：设备的 devpath 路径。</p><p>SUBSYSTEM： 设备的子系统名称，例如：sda 的子系统为 block。</p><p>BUS： 设备在 devpath 里的总线名称，例如：usb。</p><p>DRIVER： 设备在 devpath 里的设备驱动名称，例如：ide-cdrom。</p><p>ID： 设备在 devpath 里的识别号。</p><p>SYSFS{filename}： 设备的 devpath 路径下，设备的属性文件“filename”里的内容。</p><p>例如：SYSFS{model}==“ST936701SS”表示：如果设备的型号为 ST936701SS，则该设备匹配该 匹配键。</p><p>在一条规则中，可以设定最多五条 SYSFS 的 匹配键。</p><p>ENV{key}： 环境变量。在一条规则中，可以设定最多五条环境变量的 匹配键。</p><p>PROGRAM：调用外部命令。</p><p>RESULT： 外部命令 PROGRAM 的返回结果。</p></blockquote><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROGRAM==&quot;/lib/udev/scsi_id -g -s $devpath&quot;, RESULT==&quot;35000c50000a7ef67&quot;</span><br></pre></td></tr></table></figure><p>可以解释为调用外部命令 /lib/udev/scsi_id查询设备的 SCSI ID，如果返回结果为 35000c50000a7ef67，则该设备匹配该 匹配键。</p><h3 id="0x25-值和可替换操作符"><a href="#0x25-值和可替换操作符" class="headerlink" title="0x25 值和可替换操作符"></a>0x25 值和可替换操作符</h3><p>介绍完操作符以及键后，我们还要来介绍规则文件中的值。在udev中，用户可以直接定制udev规则文件的值，也可以引用下列操作替换符来进行。</p><blockquote><p>$kernel, %k：设备的内核设备名称，例如：sda、cdrom。</p><p>$number, %n：设备的内核号码，例如：sda3 的内核号码是 3。</p><p>$devpath, %p：设备的 devpath路径。</p><p>$id, %b：设备在 devpath里的 ID 号。</p><p>$sysfs{file}, %s{file}：设备的 sysfs里 file 的内容。其实就是设备的属性值。</p><p>例如：$sysfs{size} 表示该设备 ( 磁盘 ) 的大小。</p><p>$env{key}, %E{key}：一个环境变量的值。</p><p>$major, %M：设备的 major 号。</p><p>$minor %m：设备的 minor 号。</p><p>$result, %c：PROGRAM 返回的结果。</p><p>$parent, %P：父设备的设备文件名。</p><p>$root, %r：udev_root的值，默认是 /dev/。</p><p>$tempnode, %N：临时设备名。</p><p>%%：符号 % 本身。</p><p>$$：符号 $ 本身。</p></blockquote><h2 id="0x03-规则文件的编写"><a href="#0x03-规则文件的编写" class="headerlink" title="0x03 规则文件的编写"></a>0x03 规则文件的编写</h2><p>从上面的介绍和学习来说，可以见到udev的规则和语法都较为简单。只要有了匹配键和赋值键就能编写我们想要的规则文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KERNEL==&quot;tty&quot;, NAME=&quot;%k&quot;, GROUP=&quot;tty&quot;, MODE=&quot;0666&quot;, OPTIONS=&quot;last_rule&quot;</span><br></pre></td></tr></table></figure><p>该规则说明：如果有一个设备的内核设备名称为tty(KERNEL==”tty”)，那么设置新的权限为0600(MODE=”0666”)，所在的组是tty(GROUP=”tty”)。它也设置了一个特别的设备文件名:%K。在这里例子里，%k代表设备的内核名字。那也就意味着内核识别出这些设备是什么名字，就创建什么样的设备文件名。</p><p>在这里的关键就是<code>==</code>的匹配情况。那么对于一个设备怎么获取设备的属性呢？udevadm提供了一种方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">udevadm info -q path -n $(filepath) </span><br><span class="line">udevadm info -a -p $(filepath)</span><br></pre></td></tr></table></figure><p>其中<code>udevadm info -q path -n $(filepath)</code> 能够返回sysfs中的设备路径，将这一设备路径放入<code>udevadm info -a -p $(filepath)</code>的<code>filepath</code>中就能获得设备的结果信息。例子如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost samples]# udevadm info -q path -n /dev/nr0lun0</span><br><span class="line">/devices/virtual/block/nr0lun0</span><br><span class="line">[root@localhost samples]# udevadm info -a -p /devices/virtual/block/nr0lun0</span><br><span class="line"></span><br><span class="line">Udevadm info starts with the device specified by the devpath and then</span><br><span class="line">walks up the chain of parent devices. It prints for every device</span><br><span class="line">found, all possible attributes in the udev rules key format.</span><br><span class="line">A rule to match, can be composed by the attributes of the device</span><br><span class="line">and the attributes from one single parent device.</span><br><span class="line"></span><br><span class="line">  looking at device &#x27;/devices/virtual/block/nr0lun0&#x27;:</span><br><span class="line">    KERNEL==&quot;nr0lun0&quot;</span><br><span class="line">    SUBSYSTEM==&quot;block&quot;</span><br><span class="line">    DRIVER==&quot;&quot;</span><br><span class="line">    ATTR&#123;alignment_offset&#125;==&quot;0&quot;</span><br><span class="line">    ATTR&#123;capability&#125;==&quot;10&quot;</span><br><span class="line">    ATTR&#123;discard_alignment&#125;==&quot;0&quot;</span><br><span class="line">    ATTR&#123;ext_range&#125;==&quot;64&quot;</span><br><span class="line">    ATTR&#123;hidden&#125;==&quot;0&quot;</span><br><span class="line">    ATTR&#123;inflight&#125;==&quot;       0        0&quot;</span><br><span class="line">    ATTR&#123;range&#125;==&quot;64&quot;</span><br><span class="line">    ATTR&#123;removable&#125;==&quot;0&quot;</span><br><span class="line">    ATTR&#123;ro&#125;==&quot;0&quot;</span><br><span class="line">    ATTR&#123;size&#125;==&quot;15628107776&quot;</span><br><span class="line">    ATTR&#123;stat&#125;==&quot;    4457        0    47216      616     6364        0  8391544 11071107        0    21985 11071723        0        0        0        0 &quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就可以通过信息去进行匹配。比如上面这个设备我们就可以匹配 <code>KERNEL==&quot;nr[0-9]lun0&quot;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Udev规则修改学习&quot;&gt;&lt;a href=&quot;#Udev规则修改学习&quot; class=&quot;headerlink&quot; title=&quot;Udev规则修改学习&quot;&gt;&lt;/a&gt;Udev规则修改学习&lt;/h1&gt;&lt;h2 id=&quot;0x01-udev简介&quot;&gt;&lt;a href=&quot;#0x01-udev简
      
    
    </summary>
    
    
    
      <category term="Udev规则" scheme="http://yokeso.github.io/tags/Udev%E8%A7%84%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>linux驱动学习之驱动代码结构</title>
    <link href="http://yokeso.github.io/2023/03/05/linux%E5%86%85%E6%A0%B8%E9%A9%B1%E5%8A%A8%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yokeso.github.io/2023/03/05/linux%E5%86%85%E6%A0%B8%E9%A9%B1%E5%8A%A8%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-03-05T08:59:06.000Z</published>
    <updated>2023-04-02T15:39:45.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux驱动学习：驱动代码结构"><a href="#linux驱动学习：驱动代码结构" class="headerlink" title="linux驱动学习：驱动代码结构"></a>linux驱动学习：驱动代码结构</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01.前言"></a>0x01.前言</h2><p>对刚开始接触Linux驱动代码的新人来说，最困难的是面对着一个项目无从下手。对于传统的单片机来说，许多操作需要做的只是向对应的寄存器中写入所需的数值。然而同样的代码到了linux驱动中，就需要许多的回调函数，指针和结构体。而且伴随着驱动操作的逐渐复杂化，面对着一个驱动中的诸多文件更是不知所云。所以对于初学者来说最重要的就是要了解：linux驱动代码究竟做了什么，linux驱动代码结构究竟是什么？</p><p>借用找教程时候看到的一段话：</p><blockquote><p>说易行难，很多新人、甚至工作1-2年的开发者刚接触Linux内核时，别说写了，看内核代码可能都是一脸懵逼：明明是C语言，但是就是看不懂是什么意思，除了根据函数名、函数参数、函数的返回值以及注释，了解整个函数的基本功能外，一旦分析其细节，你会发现，寸步难行，每一行代码似乎都深不可测，仿佛蕴含着极大的能量</p></blockquote><p>从我开始学习linux驱动的时候，这些问题就一直环绕着我。但是却没有在网上找到一篇全面的扫盲文章。现在我希望以初学者的身份来完善出一篇专门针对于入门小白的文章。希望这篇文章能帮助到需要入门linux驱动的人。</p><p>第二章简要介绍了一点基础性的知识，需要直接看内核代码结构的可以直接前往第三章观看。</p><h2 id="0x02-基础知识"><a href="#0x02-基础知识" class="headerlink" title="0x02.基础知识"></a>0x02.基础知识</h2><h3 id="0x21-设备驱动类型"><a href="#0x21-设备驱动类型" class="headerlink" title="0x21 设备驱动类型"></a>0x21 设备驱动类型</h3><p>学习Linux驱动，首先不得不提的就是linux系统本身。</p><p>Linux遵循着一切皆文件的守则，把所有的外部设备都看作是文件，可以使用与调用文件系统相同的方法来读写外部设备。但外部设备的种类千奇百怪，怎么才能让用户无差别使用这些设备呢？这就是驱动存在的意义：通过内部定义好的编程接口，对用户隐藏了设备的工作细节，从而可以使用户通过一套标准化调用来使用设备。</p><p>对于多种多样的设备类型，Linux做了一件艰难而又伟大的事情，把他们的驱动归结为三大类：字符设备驱动，块设备驱动以及网络设备驱动。</p><p><strong>字符设备</strong>：需要字节顺序读写的设备。不能随机读写。字符设备是面向流的设备。常见的如鼠标，键盘，led等。</p><p><strong>块设备驱动</strong>：可以从设备的任意位置读取一定长度的数据设备，比如硬盘，SD卡等设备均是块设备。</p><p><strong>网络设备</strong>：网络设备不会在<code>/dev</code>中列出，不是针对文件的操作，而是使用专门的网络接口实现。应用设备不能直接访问网络驱动程序。</p><p>三种设备在Linux中的位置可以用一张图片来描述。如图所示：</p><p><img src="/2023/03/05/linux%E5%86%85%E6%A0%B8%E9%A9%B1%E5%8A%A8%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20230228174416669.png" alt="Linux系统结构图"></p><h3 id="0x22-Linux驱动编译和加载"><a href="#0x22-Linux驱动编译和加载" class="headerlink" title="0x22 Linux驱动编译和加载"></a>0x22 Linux驱动编译和加载</h3><p>linux设备驱动属于内核的一部分，所以编译加载的时候都需要内核的帮助。Linux内核的一个模块可以通过两种方式被编译和加载。</p><ul><li>直接编译进内核，同Linux启动的同时进行加载</li><li>单独编译成模块，需要的时候动态加载到内核中，不需要的时候进行卸载</li></ul><p>对于正常的C程序来说，需要有一个main函数来提供程序的入口。所以说很多初学者在看内核源码的时候最迷茫的就是寻找不到函数入口。</p><p>这是因为对于驱动程序来说，程序不是一直运行的。驱动程序运行在内核中的内核态。会在初始化完成之后不再运行，等待系统调用的时候再执行相应操作。也正是因为驱动程序属于内核的一部分。所以驱动程序不能用标准的C库，而要使用linux内核库进行开发。这也是开发C程序的人开始看内核代码时迷茫的原因之一。</p><p>驱动编译和加载的具体步骤在这里不作为详述内容。后续我会再写一篇文章来讲述这个具体步骤。（挖坑）</p><h2 id="0x03-驱动代码的结构"><a href="#0x03-驱动代码的结构" class="headerlink" title="0x03 驱动代码的结构"></a>0x03 驱动代码的结构</h2><h3 id="0x31-驱动的加载和卸载（入口函数）"><a href="#0x31-驱动的加载和卸载（入口函数）" class="headerlink" title="0x31 驱动的加载和卸载（入口函数）"></a>0x31 驱动的加载和卸载（入口函数）</h3><p>有了上面的这些信息，我们就可以来简单的了解以下Linux驱动的结构了。由于我个人最近在看NV的开源项目，所以直接用这个项目作为例子进行描述。</p><p>驱动最重要的就是要进行注册操作。注册操作使用的是<code>__init</code>宏，比如英伟达开放的某个仓库中的<code>nvfs-core.c</code>文件中的初始化函数就为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Initialize nvfs driver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">nvfs_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure><p>在初始化中最重要的是注册，注册中重要的是调用内核中的函数<code>register_chrdev()</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pr_info(<span class="string">&quot;nvidia_fs: Initializing nvfs driver module\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">major_number = register_chrdev(<span class="number">0</span>, DEVICE_NAME, &amp;nvfs_dev_fops);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (major_number &lt; <span class="number">0</span>) &#123;</span><br><span class="line">pr_err(<span class="string">&quot;nvidia_fs: failed to register a major number\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> major_number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上面代码为例，注册函数注册了驱动的名称<code>DEVICE_NAME</code>，以及驱动的操作跳转表<code>nvfs_dev_fops</code>，操作跳转表是整个驱动的灵魂。我会在后续说明。</p><p>调用注册函数之后，还会再调用一些初始化函数，这个地方不同的驱动需要初始化的数据不尽相同，需要用户自行定义。</p><p>在NVIDIA的这个驱动中，由于需要注册多个设备，驱动中还调用了两个内核函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvfs_class = class_create(THIS_MODULE, CLASS_NAME);</span><br><span class="line">nvfs_device[i] = device_create(nvfs_class, <span class="literal">NULL</span>, MKDEV(major_number, i), <span class="literal">NULL</span>, DEVICE_NAME<span class="string">&quot;%d&quot;</span>, i);</span><br></pre></td></tr></table></figure><p>他们的原型分别是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">linux<span class="number">-2.6</span><span class="number">.22</span>/include/linux/device.h</span><br><span class="line"><span class="function">struct class *<span class="title">class_create</span><span class="params">(struct <span class="keyword">module</span> *owner, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br><span class="line">    class_create - create a struct class structure</span><br><span class="line">    @owner: pointer to the <span class="keyword">module</span> that is to <span class="string">&quot;own&quot;</span> <span class="keyword">this</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span></span></span><br><span class="line"><span class="class">    @<span class="title">name</span>:</span> pointer to a <span class="built_in">string</span> <span class="keyword">for</span> the name of <span class="keyword">this</span> class.</span><br><span class="line">        </span><br><span class="line">linux<span class="number">-2.6</span><span class="number">.22</span>/include/linux/device.h</span><br><span class="line"><span class="function">struct device *<span class="title">device_create</span><span class="params">(struct class *cls, </span></span></span><br><span class="line"><span class="function"><span class="params">                             struct device *parent, </span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">dev_t</span> devt, </span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">void</span> *drvdata, </span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line">    class_device_create - creates a <span class="class"><span class="keyword">class</span> <span class="title">device</span> <span class="title">and</span> <span class="title">registers</span> <span class="title">it</span> <span class="title">with</span> <span class="title">sysfs</span></span></span><br><span class="line"><span class="class">    @<span class="title">cls</span>:</span> pointer to the <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> <span class="title">that</span> <span class="title">this</span> <span class="title">device</span> <span class="title">should</span> <span class="title">be</span> <span class="title">registered</span> <span class="title">to</span>.</span></span><br><span class="line"><span class="class">    @<span class="title">parent</span>:</span> pointer to the parent <span class="class"><span class="keyword">struct</span> <span class="title">class_device</span> <span class="title">of</span> <span class="title">this</span> <span class="title">new</span> <span class="title">device</span>, <span class="title">if</span> <span class="title">any</span>.</span></span><br><span class="line"><span class="class">    @<span class="title">devt</span>:</span> the <span class="keyword">dev_t</span> <span class="keyword">for</span> the <span class="keyword">char</span> device to be added.</span><br><span class="line">    @device: a pointer to a <span class="class"><span class="keyword">struct</span> <span class="title">device</span> <span class="title">that</span> <span class="title">is</span> <span class="title">assiociated</span> <span class="title">with</span> <span class="title">this</span> <span class="keyword">class</span> <span class="title">device</span>.</span></span><br><span class="line"><span class="class">    @<span class="title">fmt</span>:</span> <span class="built_in">string</span> <span class="keyword">for</span> the <span class="class"><span class="keyword">class</span> <span class="title">device</span>&#x27;<span class="title">s</span> <span class="title">name</span></span></span><br></pre></td></tr></table></figure><p>通过两个函数原型以及描述可以看出，<code>class_create</code>的目的是创建一个驱动类，然后通过<code>device_create</code>函数为类创建一个或多个设备。</p><p>总结下来来看，入口<code>__init</code>函数的流程就清晰了很多。最后把整个函数放上来，帮助把流程捋顺。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Initialize nvfs driver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">nvfs_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">pr_info(<span class="string">&quot;nvidia_fs: Initializing nvfs driver module\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">major_number = register_chrdev(<span class="number">0</span>, DEVICE_NAME, &amp;nvfs_dev_fops);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (major_number &lt; <span class="number">0</span>) &#123;</span><br><span class="line">pr_err(<span class="string">&quot;nvidia_fs: failed to register a major number\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> major_number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pr_info(<span class="string">&quot;nvidia_fs: registered correctly with major number %d\n&quot;</span>,</span><br><span class="line">major_number);</span><br><span class="line"></span><br><span class="line">nvfs_class = class_create(THIS_MODULE, CLASS_NAME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IS_ERR(nvfs_class)) &#123;</span><br><span class="line">unregister_chrdev(major_number, DEVICE_NAME);</span><br><span class="line">pr_err(<span class="string">&quot;nvidia_fs: Failed to register device class\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> PTR_ERR(nvfs_class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nvfs_class-&gt;devnode = nvfs_devnode;</span><br><span class="line"></span><br><span class="line">nvfs_set_device_count(nvfs_max_devices);</span><br><span class="line"></span><br><span class="line">nvfs_curr_devices = nvfs_get_device_count();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nvfs_curr_devices; i++) &#123;</span><br><span class="line">nvfs_device[i] = device_create(nvfs_class, <span class="literal">NULL</span>,</span><br><span class="line">MKDEV(major_number, i),</span><br><span class="line"><span class="literal">NULL</span>, DEVICE_NAME<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(nvfs_device[i])) &#123;</span><br><span class="line">class_destroy(nvfs_class);</span><br><span class="line">unregister_chrdev(major_number, DEVICE_NAME);</span><br><span class="line">pr_err(<span class="string">&quot;nvidia_fs: Failed to create the device\n&quot;</span>);</span><br><span class="line">i -= <span class="number">1</span>;</span><br><span class="line"><span class="comment">// Cleanup all the previous devices</span></span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// initialize meta group data structures</span></span><br><span class="line">        nvfs_mgroup_init();</span><br><span class="line">atomic_set(&amp;nvfs_shutdown, <span class="number">0</span>);</span><br><span class="line">init_waitqueue_head(&amp;wq);</span><br><span class="line">nvfs_proc_init();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FAULT_INJECTION</span></span><br><span class="line">nvfs_init_debugfs();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">nvfs_stat_init();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TEST_DISCONTIG_ADDR</span></span><br><span class="line">nvfs_init_simulated_address();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">nvfs_fill_gpu2peer_distance_table_once();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line"><span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">device_destroy(nvfs_class, MKDEV(major_number,i));</span><br><span class="line">i -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对驱动的入口函数有一个简要的了解之后，最好奇的应该是出口函数的书写方式。一般来说，出口函数和入口函数都会放在同一个文件的上下函数。现在就来看一下。</p><p>与入口函数相同，驱动的出口函数也会有宏标识<code>__exit</code>，并且执行了与注册函数几乎完全相反的操作。</p><p>正常来说除了用户自定义的注销函数之外，还需要调用<code>unregister_chrdev</code>函数进行注销，流程就结束了。</p><p>但是对于NV的这个驱动来说，由于他在注册的时候注册了多个设备，所以在注销的时候需要多两个步骤。也就是设备的注销以及类的注销。</p><p>由于注销函数很短，所以不做过多讲述。直接把整个函数贴过来留作查看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">nvfs_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">atomic_set(&amp;nvfs_shutdown, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">wait_event_interruptible_timeout(wq,</span><br><span class="line">(nvfs_count_ops() == <span class="number">0</span>),</span><br><span class="line">msecs_to_jiffies(NVFS_HOLD_TIME));</span><br><span class="line">nvfs_dbg(<span class="string">&quot;count_ops :%lu\n&quot;</span>, nvfs_count_ops());</span><br><span class="line">&#125; <span class="keyword">while</span> (nvfs_count_ops());</span><br><span class="line">nvfs_proc_cleanup();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FAULT_INJECTION</span></span><br><span class="line">nvfs_free_debugfs();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">nvfs_stat_destroy();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nvfs_curr_devices; i++) &#123;</span><br><span class="line">device_destroy(nvfs_class, MKDEV(major_number, i));</span><br><span class="line">&#125;</span><br><span class="line">class_destroy(nvfs_class);</span><br><span class="line">unregister_chrdev(major_number, DEVICE_NAME);</span><br><span class="line">pr_info(<span class="string">&quot;nvidia_fs: driver unloaded successfully\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，声明两个函数后还需要调用一下，调用函数通常在文件的结尾处。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module_init(nvfs_init);</span><br><span class="line">module_exit(nvfs_exit);</span><br></pre></td></tr></table></figure><p>这样程序的出入口环节就彻底结束了。</p><h3 id="0x32-驱动中的重要内核数据"><a href="#0x32-驱动中的重要内核数据" class="headerlink" title="0x32 驱动中的重要内核数据"></a>0x32 驱动中的重要内核数据</h3><p>大部分的基础性的驱动操作包括3个重要的内核数据结构，称为file_operations，file，和inode。</p><h4 id="file-operation"><a href="#file-operation" class="headerlink" title="file_operation"></a>file_operation</h4><p>在上一节的入口函数中，我们曾经提及过操作跳转表这个概念。当时是在驱动注册时调用的。现在就是揭开这部分神秘面纱的时候了。</p><p>操作跳转表这个概念其实是我个人的翻译，实际上来说这个是一个叫做<code>file_operation</code>的结构体。这个结构体是将系统调用以及驱动程序关联起来的重要数据结构。操作表中的每个成员都对应着一个函数的指针。而名称则对应着一个系统调用。（对于不支持的操作留作null.）通过这种绑定方式，当系统调用发生时，系统读取跳转表中与调用相应的函数的指针，然后将控制权转交给函数。这样就完成了Linux设备的驱动工作。NV的代码中结构体初始化如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">nvfs_dev_fops</span> =</span> &#123;</span><br><span class="line">.compat_ioctl = nvfs_ioctl,</span><br><span class="line">.unlocked_ioctl = nvfs_ioctl,</span><br><span class="line">.open = nvfs_open,</span><br><span class="line">.release = nvfs_close,</span><br><span class="line">        .mmap = nvfs_mgroup_mmap,</span><br><span class="line">        .owner = THIS_MODULE,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><ul><li>file 结构代表一个打开的文件，它的特点是一个文件可以对应多个file结构。它由内核再open时创建，并传递给在该文件上操作的所有函数，直到最后close函数，在文件的所有实例都被关闭之后，内核才释放这个数据结构。</li><li>在内核源代码中，指向 struct file 的指针通常比称为filp，file结构有以下几个重要的成员：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="class"><span class="keyword">struct</span> <span class="title">file</span>&#123;</span></span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">mode_t</span> fmode; <span class="comment">/*文件模式，如FMODE_READ，FMODE_WRITE*/</span></span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> ......</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="keyword">loff_t</span> f_pos; <span class="comment">/*loff_t 是一个64位的数，需要时，须强制转换为32位*/</span></span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> f_flags; <span class="comment">/*文件标志，如：O_NONBLOCK*/</span></span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">f_op</span>;</span></span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">13</span> <span class="keyword">void</span> *private_data; <span class="comment">/*非常重要，用于存放转换后的设备描述结构指针*/</span></span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span> .......</span><br><span class="line"><span class="number">16</span> </span><br><span class="line"><span class="number">17</span> &#125;;</span><br></pre></td></tr></table></figure><h4 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h4><ul><li>内核用inode 结构在内部表示文件，它是实实在在的表示物理硬件上的某一个文件，且一个文件仅有一个inode与之对应，同样它有二个比较重要的成员：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="class"><span class="keyword">struct</span> <span class="title">inode</span>&#123;</span></span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">dev_t</span> i_rdev; <span class="comment">/*设备编号*/</span></span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> *<span class="title">i_cdev</span>;</span> <span class="comment">/*cdev 是表示字符设备的内核的内部结构*/</span></span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> &#125;;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> 可以从inode中获取主次设备号，使用下面二个宏：</span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span> <span class="comment">/*驱动工程师一般不关心这两个宏*/</span></span><br><span class="line"><span class="number">12</span> </span><br><span class="line"><span class="number">13</span> <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">imajor</span><span class="params">(struct inode *inode)</span></span>;</span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span> <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">iminor</span><span class="params">(struct inode *inode)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="0x33-驱动中的模块参数组"><a href="#0x33-驱动中的模块参数组" class="headerlink" title="0x33 驱动中的模块参数组"></a>0x33 驱动中的模块参数组</h3><p>我们可以利用module_param(参数名、参数类型、参数读写属性) 为模块定义一个参数，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *string_test = “<span class="keyword">this</span> is a test”;</span><br><span class="line"><span class="keyword">static</span> num_test = <span class="number">1000</span>;</span><br><span class="line">module_param (num_test,<span class="keyword">int</span>,S_IRUGO);</span><br><span class="line">module_param (steing_test,charp,S_ITUGO);</span><br></pre></td></tr></table></figure><p>在装载模块时，用户可以给模块传递参数，形式为：<code>insmod 模块名 参数名=参数值</code>，如果不传递，则参数使用默认的参数值</p><p>参数的类型可以是：byte,short,ushort,int,uint,long,ulong,charp,bool；</p><p>权限：定义在<code>linux/stat.h</code>中，控制存取权限，<code>S_IRUGO</code>表示所有用户只读；</p><p>模块被加载后，在<code>sys/module/</code>下会出现以此模块命名的目录，当读写权限为零时：表示此参数不存在sysfs文件系统下的文件节点，当读写权限不为零时：此模块的目录下会存在<code>parameters</code>目录，包含一系列以参数名命名的文件节点，这些文件节点的权限值就是传入<code>module_param()</code>的参数读/写权限，而该文件的内容为参数的值。</p><p>除此之外，模块也可以拥有参数数组，形式为：<code>module_param_array(数组名、数组类型、数组长、参数读写权限等)</code>，当不需要保存实际的输入的数组元素的个数时，可以设置“数组长“为0。</p><p>运行insmod时，使用逗号分隔输入的数组元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MODULE_VERSION(TO_STR(MOD_VERS(NVFS_DRIVER_MAJOR_VERSION, NVFS_DRIVER_MINOR_VERSION, NVFS_DRIVER_PATCH_VERSION)));</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL v2&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;NVIDIA GPUDirect Storage&quot;</span>);</span><br><span class="line">module_param_named(max_devices, nvfs_max_devices, uint, S_IWUSR | S_IRUGO);</span><br><span class="line">MODULE_PARM_DESC(nvfs_max_devices, <span class="string">&quot;number of character devices to expose&quot;</span>);</span><br><span class="line">module_param_named(dbg_enabled, nvfs_dbg_enabled, uint, S_IWUSR | S_IRUGO);</span><br><span class="line">MODULE_PARM_DESC(nvfs_dbg_enabled, <span class="string">&quot;enable debug tracing&quot;</span>);</span><br><span class="line">module_param_named(info_enabled, nvfs_info_enabled, uint, S_IWUSR | S_IRUGO);</span><br><span class="line">MODULE_PARM_DESC(nvfs_info_enabled, <span class="string">&quot;enable info tracing&quot;</span>);</span><br><span class="line">module_param_named(peer_stats_enabled, nvfs_peer_stats_enabled, uint, S_IWUSR | S_IRUGO);</span><br><span class="line">MODULE_PARM_DESC(nvfs_peer_stats_enabled, <span class="string">&quot;enable peer stats&quot;</span>);</span><br><span class="line">module_param_named(rw_stats_enabled, nvfs_rw_stats_enabled, uint, S_IWUSR | S_IRUGO);</span><br><span class="line">MODULE_PARM_DESC(nvfs_rw_stats_enabled, <span class="string">&quot;enable read-write stats&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux驱动学习：驱动代码结构&quot;&gt;&lt;a href=&quot;#linux驱动学习：驱动代码结构&quot; class=&quot;headerlink&quot; title=&quot;linux驱动学习：驱动代码结构&quot;&gt;&lt;/a&gt;linux驱动学习：驱动代码结构&lt;/h1&gt;&lt;h2 id=&quot;0x01-前言&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="Linux驱动, linux" scheme="http://yokeso.github.io/tags/Linux%E9%A9%B1%E5%8A%A8-linux/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式开发技巧汇总</title>
    <link href="http://yokeso.github.io/2022/10/12/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/"/>
    <id>http://yokeso.github.io/2022/10/12/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/</id>
    <published>2022-10-12T02:03:41.000Z</published>
    <updated>2023-04-01T11:14:33.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="嵌入式开发技巧汇总"><a href="#嵌入式开发技巧汇总" class="headerlink" title="嵌入式开发技巧汇总"></a>嵌入式开发技巧汇总</h1><h2 id="宏定义相关"><a href="#宏定义相关" class="headerlink" title="宏定义相关"></a>宏定义相关</h2><h3 id="error"><a href="#error" class="headerlink" title="#error"></a>#error</h3><h1 id="error-可以直接在编译器中打出error，用于必须的配置文件中使用。例如"><a href="#error-可以直接在编译器中打出error，用于必须的配置文件中使用。例如" class="headerlink" title="error 可以直接在编译器中打出error，用于必须的配置文件中使用。例如"></a>error 可以直接在编译器中打出error，用于必须的配置文件中使用。例如</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">error</span>  <span class="meta-string">&quot;please select device name&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="嵌入式中实现配置文件的方法（工程文件的方式）"><a href="#嵌入式中实现配置文件的方法（工程文件的方式）" class="headerlink" title="嵌入式中实现配置文件的方法（工程文件的方式）"></a>嵌入式中实现配置文件的方法（工程文件的方式）</h3><p>首先建立一个扩展名文件 DEVINFO.txt，扔进文件夹</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DEVINFO.txt</span></span><br><span class="line"><span class="comment">// 设备名，字符串</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEV_NAME    DEFAULT</span></span><br><span class="line"><span class="comment">// 设备ID，U32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEV_ID      0</span></span><br></pre></td></tr></table></figure><p>在.h文件中声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//device.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _DEVICE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _DEVICE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DEVINFO_FILENAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVINFO_FILENAME DEVINFO.txt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Device_printfMsg</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>就可以在.c文件中使用了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//device.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;device.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _STR(s)  #s</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MollocDefineToStr(mal)  _STR(mal)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> MollocDefineToStr(DEVINFO_FILENAME) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> devType[] = MollocDefineToStr(DEV_NAME);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint32_t</span> devID = DEV_ID;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> devDName[] = MollocDefineToStr(DEV_NAME) <span class="string">&quot;_&quot;</span> MollocDefineToStr(DEV_ID) <span class="string">&quot;.local&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Device_printfMsg</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Device: %s\r\n&quot;</span> , devType);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;DevID: %u\r\n&quot;</span> , devID);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;DomainName: %s\r\n&quot;</span> , devDName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在.c文件中最重要的是这样一句话</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> MollocDefineToStr(DEVINFO_FILENAME) </span></span><br></pre></td></tr></table></figure><p>这句话在经过编译器编译后会变成  #include “DEVINFO.txt”。这种成组绑定，固定的配置信息很适合用这种方式耦合进不同的配置文件中去。</p><h3 id="一些比较奇特的宏"><a href="#一些比较奇特的宏" class="headerlink" title="一些比较奇特的宏"></a>一些比较奇特的宏</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __JOIN(x,y) x##y<span class="comment">// 连接标识符(非字符串连接成非字符串，字符串连接成字符串)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __CHAR(x)   #@x<span class="comment">// 将参数转换成字符(x长度小于5，否则会溢出)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __S(x)   #x<span class="comment">// 将x变成字符串（如果x是宏也不展开）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __ST(x)   _T(#x)<span class="comment">// 将x变成T字符串（如果x是宏也不展开）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _S(x)   __S(x)<span class="comment">// 将x变成字符串（如果x是宏，展开)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ST(x)   __ST(x)<span class="comment">// 将x变成字符串（如果x是宏，展开)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TO_STR(x, y) _S(x) <span class="meta-string">&quot;&quot;</span> _S(y)<span class="comment">// 将参数连接并转成字符串(遇宏则展开)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TO_STRT(x, y) _T( _S(x) <span class="meta-string">&quot;&quot;</span> _S(y) )</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">testStrMacro</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ab = <span class="number">12</span>;</span><br><span class="line">    assert(__JOIN(<span class="number">1</span>, <span class="number">2</span>) == <span class="number">12</span>); <span class="comment">// 常量连接组合</span></span><br><span class="line">    assert(__JOIN(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>) == <span class="string">&quot;ab&quot;</span>); <span class="comment">// 字符串连接</span></span><br><span class="line">    assert(__JOIN(a, b) == <span class="number">12</span>); <span class="comment">// 变量组合连接</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> a = __CHAR(<span class="number">65</span>);</span><br><span class="line">    assert(a == &#x27;65&#x27;);</span><br><span class="line">    assert(__CHAR(中国) == &#x27;中国&#x27;);</span><br><span class="line">    <span class="keyword">auto</span> cc = __CHAR(PNG);</span><br><span class="line">    assert(__CHAR(PNG) == <span class="number">0x504e47</span>);<span class="comment">// PNG 的 hex即是 0x504e47</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接转成字符串</span></span><br><span class="line">    assert(__S(<span class="number">65</span>) == <span class="string">&quot;65&quot;</span>);</span><br><span class="line">    assert(__ST(<span class="number">65</span>) == _T(<span class="string">&quot;65&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> test a</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> test_s <span class="meta-string">&quot;a&quot;</span> </span></span><br><span class="line">    assert(__S(test) == <span class="string">&quot;test&quot;</span>); <span class="comment">// test是宏，但__S里有#，所以后续内容不展开</span></span><br><span class="line">    assert(__ST(test) == _T(<span class="string">&quot;test&quot;</span>)); <span class="comment">// test是宏，但__S里有#，所以后续内容不展开</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 宏展开转换成字符串</span></span><br><span class="line">    assert(_S(test) == <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    assert(_ST(test) == _T(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    assert(_TO_STRT(test, <span class="number">123</span>) == _T(<span class="string">&quot;a123&quot;</span>));</span><br><span class="line">    assert(_TO_STR(test, <span class="number">123</span>) == <span class="string">&quot;a123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 宏嵌套效果</span></span><br><span class="line">    <span class="keyword">auto</span> b = _TO_STR(__S(test), <span class="number">123</span>);</span><br><span class="line">    assert(_TO_STR(__S(test), <span class="number">123</span>) == <span class="string">&quot;\&quot;test\&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">auto</span> c = _TO_STR(_S(test), <span class="number">123</span>);</span><br><span class="line">    assert(_TO_STR(_S(test), <span class="number">123</span>) == <span class="string">&quot;\&quot;a\&quot;123&quot;</span>);  <span class="comment">//_S(test) 展开成了a</span></span><br><span class="line">    assert(_TO_STR(_S(test), _TO_STR(<span class="number">123</span>, <span class="number">456</span>)) == <span class="string">&quot;\&quot;a\&quot;\&quot;123\&quot; \&quot;\&quot; \&quot;456\&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="print是否输出设置"><a href="#print是否输出设置" class="headerlink" title="print是否输出设置"></a>print是否输出设置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _DEBUG_MSG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _DEBUG_MSG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> _dbg_printf0(format)                   ((void)printf(format))</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> _dbg_printf1(format,p1)                ((void)printf(format,p1))</span></span><br><span class="line">  ……</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> _dbg_printf0(format)</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> _dbg_printf1(format,p1)</span></span><br><span class="line">  ……</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这样，只要在各个模块中引用这个文件就可以用统一的接口输出调试信息。在主配置文件中定义_DEBUG 所有的调试printf就是真实的printf，否则作为空语句无意义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;DebugMsg.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Device_printfMsg</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  _dbg_printf0(<span class="string">&quot;Device_printfMsg called.\r\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Device: %s\r\n&quot;</span> , devType);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;DevID: %u\r\n&quot;</span> , devID);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;DomainName: %s\r\n&quot;</span> , devDName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;嵌入式开发技巧汇总&quot;&gt;&lt;a href=&quot;#嵌入式开发技巧汇总&quot; class=&quot;headerlink&quot; title=&quot;嵌入式开发技巧汇总&quot;&gt;&lt;/a&gt;嵌入式开发技巧汇总&lt;/h1&gt;&lt;h2 id=&quot;宏定义相关&quot;&gt;&lt;a href=&quot;#宏定义相关&quot; class=&quot;header
      
    
    </summary>
    
    
    
      <category term="嵌入式" scheme="http://yokeso.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
      <category term="技巧" scheme="http://yokeso.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>关系代数</title>
    <link href="http://yokeso.github.io/2022/01/18/04%20%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/"/>
    <id>http://yokeso.github.io/2022/01/18/04%20%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:49:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="04-关系代数"><a href="#04-关系代数" class="headerlink" title="04 关系代数"></a>04 关系代数</h1><ul><li>基本操作：并、差、积、选择、投影（更名）</li><li>扩展操作：交、连接、除</li></ul><p>关系代数操作以一个或多个关系为输入，结果是一个新的关系</p><p>用对关系的运算来表达查询，需要指明所用操作, 具有一定的过程性</p><h2 id="关系代数基本操作"><a href="#关系代数基本操作" class="headerlink" title="关系代数基本操作"></a>关系代数基本操作</h2><p>某些操作，如并、差、交等，需要满足“并相容性”</p><ul><li>两个关系的属性数目相同</li><li>两个关系对应位置的属性的域相同</li></ul><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><h6 id="并"><a href="#并" class="headerlink" title="并"></a>并</h6><ul><li>表示出现在关系R中或出现在关系S中的元组，</li></ul><ul><li>数学描述：$R\cup S={ t|t\in R \cup t \in S} $</li><li>并运算是将两个元组合并成一个关系，在合并时去掉重复的元组</li><li>$R\cup S$与$S\cup R$运算结果是同一个关系</li></ul><h6 id="差"><a href="#差" class="headerlink" title="差"></a>差</h6><ul><li>表示出现在关系R中但不出现在关系S中的元素构成</li><li>数学描述：$R-S={ t|t\in R \and t\not \in S}$</li><li>R-S和S-R不同</li></ul><h6 id="广义笛卡尔积"><a href="#广义笛卡尔积" class="headerlink" title="广义笛卡尔积"></a>广义笛卡尔积</h6><ul><li>表示关系R中的元组与关系S的元组进行所有可能的拼接（或串接）构成</li><li>数学描述： $R\times S={ <a_1,a_2,...,a_n,b_1,b_2...,b_m>|<a_1,a_2,...,a_n>\in R\and <b_1,b_2...,b_m>\in S}$</b_1,b_2...,b_m></a_1,a_2,...,a_n></a_1,a_2,...,a_n,b_1,b_2...,b_m></li></ul><h6 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h6><ul><li>从关系R中选择出属性包含在A中的列构成</li><li><p>数学描述：$\prod<em>{A</em>{i1},A<em>{i2},…,A</em>{ik}}(R)={<t[A_{i1}],t[A_{i2}],...,t[A_{ik}]>|t\in R}$</t[A_{i1}],t[A_{i2}],...,t[A_{ik}]></p><ul><li>设$R(A_1,A_2,…A_n)$</li><li>${A<em>1,A_2,…,A</em>{ik}}\subseteq{A_1,A_2,…,A_n}$</li><li>$t[A_i]$表示元组t中相应于属性$A_i$的分量</li><li>投影运算可以对原关系的列在投影后重新排列</li></ul></li><li><p>投影操作是从给定关系中选出某些列组成新的关系，而选择操作是从给定关系中选出某些行组成新的关系</p></li></ul><h2 id="关系代数之扩展操作"><a href="#关系代数之扩展操作" class="headerlink" title="关系代数之扩展操作"></a>关系代数之扩展操作</h2><h6 id="交"><a href="#交" class="headerlink" title="交"></a>交</h6><ul><li>假设关系R和关系S是并相容的，则关系R与关系S的交运算结果也是一个关系，记作$R \and S$，由同时出现在关系R和关系S中的元组构成</li><li>数学描述：$R \cap S = {t|t\in R\cap t\in S}$,其中t是元组</li><li>$R\cap S$和$S\cap R $是同一个关系</li><li>交运算可以通过差运算实现：</li><li>$R\cap S =R-(R-S) = S-(S-R)$</li></ul><h6 id="theta-连接操作"><a href="#theta-连接操作" class="headerlink" title="$\theta$连接操作"></a>$\theta$连接操作</h6><ul><li>给定关系R和关系S，R与S的$\theta$连接运算结果也是一个关系，记做$R{\triangleright \triangleleft}_{A \theta B} S$,它由关系R和关系S的笛卡尔积中，选取R中属性A与S中属性B之间满足$\theta$的元组构成</li><li><p>数学描述：$R{\triangleright \triangleleft}<em>{A \theta B} S = \sigma</em>{ t[A]\theta s[B]}(R\times S)$</p><ul><li>设$R(A_1,A_2,…A_n)，A\in {A_1,A_2,…A_n}$</li><li>$S(B_1,B_2,…,B_m),B\in {B_1,B-2,…,B_m}$</li><li>t是关系R中的元组，s是关系中的元组</li><li>属性A和属性B具有可比性</li><li>$\theta$是比较运算符，$\theta \in { &gt;,\geq,&lt;,\leq,=,\not =}$</li></ul></li><li><p>在实际应用中，$\theta-$连接经常与投影，选择操作一起使用</p></li></ul><h6 id="等值连接操作"><a href="#等值连接操作" class="headerlink" title="等值连接操作"></a>等值连接操作</h6><ul><li>特殊的$\theta$连接操作（关系是等号）</li></ul><h6 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h6><ul><li><p>定义：由关系S和关系R的笛卡儿积中选择相同属性组B上值相等的元素组成</p></li><li><p>数学描述：$R{\triangleright \triangleleft}<em>{A \theta B} S = \sigma</em>{ t[B]= s[B]}(R\times S)$</p><ul><li><p>自然连接是一种特殊的等值连接</p></li><li><p>要求关系R和关系S必须由相同的属性组B（B可以为单一属性可以为多属性）</p></li><li><p>R，S属性相同，值必须相等才能连接，即</p><p>$R.B_1=S.B_1 and R.B_2=S.B_2…. and R.B_n=S.B_n$</p></li><li><p>要在结果中去除重复的属性列，（因为$R.B_i$恒等于$S.B_i$，所以只保留一列即可）</p></li></ul></li></ul><h2 id="关系代数之复杂扩展操作"><a href="#关系代数之复杂扩展操作" class="headerlink" title="关系代数之复杂扩展操作"></a>关系代数之复杂扩展操作</h2><h6 id="除操作"><a href="#除操作" class="headerlink" title="除操作"></a>除操作</h6><ul><li>用于求解“查询…全部的/所有的…”问题</li><li>前提条件：给定关系$R(A_1,A_2,…,A_n)$为n度关系，关系$S(B_1,B_2,…,B_n)$为m度关系，如果可以进行关系R与关系S的除运算，当且仅当：属性集${B_1,B_2,…,B_m}$是属性集${A_1,A_2,…,A_n}$的真子集，即$m&lt;n$</li><li>定义，关系R和关系S的除运算结果也是一个关系，记作$R\div S$分两部分定义<ul><li>$R\div S$的属性：在R中去掉S中的属性，剩余属性的个数是$R\div S$的属性个数</li><li>$R\div S$的元组：$R\div S$这个元组与S的元组组合后的每个元组必须存在于R中</li></ul></li></ul><p><img src="/2022/01/18/04%20%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/image-20210120101213747.png" alt="image-20210120101213747"></p><h6 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h6><ul><li>两个关系R与S进行连接时，如果关系R（或S）中的元组在S（或R）中找不到匹配的元组，则为了避免该元组信息丢失，从而将该元组与S（或R）中假定存在的全为空值的元组形成连接，放置在关系中，这种连接称为外连接</li><li>外连接=自然连接(或$\theta$连接)+失配的元组(与空元组形成的连接)</li><li>外连接的形式:左外连接,右外链接,全外连接<ul><li>左外连接=自然连接(或$\theta$连接)+左侧表中失配的元组</li><li>右外连接=自然连接(或$\theta$连接)+右侧表中失配的元组</li><li>全外连接=自然连接(或$\theta$连接)+两侧表中失配的元组</li></ul></li></ul><p><img src="/2022/01/18/04%20%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/image-20210120161645722.png" alt="image-20210120161645722"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;04-关系代数&quot;&gt;&lt;a href=&quot;#04-关系代数&quot; class=&quot;headerlink&quot; title=&quot;04 关系代数&quot;&gt;&lt;/a&gt;04 关系代数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基本操作：并、差、积、选择、投影（更名）&lt;/li&gt;
&lt;li&gt;扩展操作：交、连接、除&lt;/l
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yokeso.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>关系模型之关系演算</title>
    <link href="http://yokeso.github.io/2022/01/18/05%20%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%85%B3%E7%B3%BB%E6%BC%94%E7%AE%97/"/>
    <id>http://yokeso.github.io/2022/01/18/05%20%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%85%B3%E7%B3%BB%E6%BC%94%E7%AE%97/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关系模型之关系演算"><a href="#关系模型之关系演算" class="headerlink" title="关系模型之关系演算"></a>关系模型之关系演算</h1><h2 id="1-关系演算之元组演算"><a href="#1-关系演算之元组演算" class="headerlink" title="1.关系演算之元组演算"></a>1.关系演算之元组演算</h2><ul><li>关系演算以数理逻辑中的谓词演算为基础</li><li>是描述关系运算的另一种思维方式</li><li>关系演算根据谓词变量不同，分为关系元组演算和关系域演算</li><li>基本形式：${t|P(t)}$表示使用谓词P为真的元组t的集合<ul><li>t是元组变量</li><li>$t\in r$表示元组在关系r中</li><li>t[A]表示元组t的分量，即t在属性A上的值</li><li>P是与谓词逻辑相似的公式，P(t)表示以元组t为变量的公式</li><li>可以递归定义</li></ul></li></ul><p><img src="/2022/01/18/05%20%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%85%B3%E7%B3%BB%E6%BC%94%E7%AE%97/image-20210120162850304.png" alt="image-20210120162850304"></p><p><img src="/2022/01/18/05%20%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%85%B3%E7%B3%BB%E6%BC%94%E7%AE%97/image-20210120194242429.png" alt="image-20210120194242429"></p><h2 id="2-关系演算之关系域演算"><a href="#2-关系演算之关系域演算" class="headerlink" title="2.关系演算之关系域演算"></a>2.关系演算之关系域演算</h2><p>关系域演算公式：</p><p>关系域演算的基本形式：${<x_1,x_2,...,x_n>|p(x_1,x_2,…,x_n)}$</x_1,x_2,...,x_n></p><p>其中，$x_1$代表域变量或常量，P为以$x_1$为变量的公式公式P可以递归构造</p><ul><li><p>三种形式的原子公式</p><ul><li><p>$<x_1,x_2,...,x_n>\in R$。其中$x_i$代表域变量或常量，表示由域变量构成的$<x_1,x_2,...,x_n>$是属于关系R的</x_1,x_2,...,x_n></x_1,x_2,...,x_n></p></li><li><p>$x\theta y$。其中，域变量x与常量c之间满足比较关系$\theta$，$\theta$是比较运算符$&lt;,\leq,=,&lt;&gt;,&gt;,\geq$</p></li><li>$x\theta y$。其中，域变量x与常量y之间满足比较关系$\theta$，</li></ul></li><li><p>如果p是公式，那么$\lnot p$也是公式</p></li><li>如果P1,P2 是公式。那么$P1\and P2,P1\or P2$也是公式</li><li>如果P是公式，x是域变量，则$\exists (x)(P(x))$和$\forall (x)(P(x))$也是公式、</li><li>需要时可加括弧</li><li>上述运算符的优先次序自高至底为：括弧；$\theta；\exists; \forall;\lnot;\and;\or$</li><li>公式只限于以上形式</li></ul><h2 id="域演算与元组演算的区别"><a href="#域演算与元组演算的区别" class="headerlink" title="域演算与元组演算的区别"></a>域演算与元组演算的区别</h2><p>元组演算的基本形式：${t|p(t)}$</p><p>域演算的基本形式：${<x_1,x_2,...,x_n>|P(x_1,x_2,…,x_n)}$</x_1,x_2,...,x_n></p><p>元组演算是以元组为变量，以元组为基本处理单位，先找到元组，然后找到元组分组，然后再找到元组分量，进行谓词判断。</p><p>域演算是以域变量为基本处理单位，先有域变量，然后再判断由这些域变量组成的元组是否满足谓词判断。</p><p>公式的运算符是相同的，之有其中的变量不同。</p><h2 id="域演算语言QBE"><a href="#域演算语言QBE" class="headerlink" title="域演算语言QBE"></a>域演算语言QBE</h2><p><img src="/2022/01/18/05%20%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%85%B3%E7%B3%BB%E6%BC%94%E7%AE%97/image-20210122184553797.png" alt="image-20210122184553797"></p><p>QBE操作框架由四个部分组成</p><ul><li>关系名区：用于书写欲待查询的关系名</li><li>属性名区：用于显示对应关系名区关系的所有属性名</li><li>操作命令区：用于书写查询操作的命令</li><li>查询条件区：用于书写查询条件</li></ul><p><img src="/2022/01/18/05%20%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%85%B3%E7%B3%BB%E6%BC%94%E7%AE%97/image-20210122190150563.png" alt="image-20210122190150563"></p><p>QBE操作命令</p><ul><li>Print或P．——显示输出命令</li><li>Delete或D．——删除操作</li><li>Insert或I．——插入操作</li><li>Update或Ｕ．——更新操作</li></ul><p>QBE的查询条件 —不同属性上的与条件</p><ul><li>QBE不同属性上的与条件可以写在同一行中</li></ul><p>QBE的查询条件—示例元素与投影</p><ul><li><p>条件$\theta$参量中的参量也可以是域参量,用任何一个值(不必是结果中的值)带有下划线表示,被称为示例元素.示例元素下划线上卖弄的值不起作用,被当做变量名用来对待,只用于占位或是链接条件.不带下划线的则是构成实际条件一部分的值</p></li><li><p>当不是显示出所有内容时,可在条件区对应要显示的列下面书写显示输出命令(投影运算).</p></li></ul><p>QBE的查询条件—用示例元素实现与运算和或运算</p><p><img src="/2022/01/18/05%20%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%85%B3%E7%B3%BB%E6%BC%94%E7%AE%97/image-20210122205710899.png" alt="image-20210122205710899"></p><h2 id="关系运算的安全性"><a href="#关系运算的安全性" class="headerlink" title="关系运算的安全性"></a>关系运算的安全性</h2><p><strong>不产生无限关系和无穷验证的运算被称为是安全的</strong></p><ul><li><p>关系代数是一种集合运算，是安全的</p><ul><li>集合本身是有限的，有限元素集合的有限次运算仍旧是有限的</li></ul></li><li><p>关系演算不一定是安全的</p><ul><li>例如${t|\lnot (R(t)),},{t|R(t)\or t[2]&gt;3}$可能表示无限关系</li><li>R(t)是有限的，但不在R(t)中的元素就可能是无限的</li><li>再例如：$(\exists u)(\omega (u))$，$(\forall u)(\omega (u))$</li><li>前者称为“假验证”，即验证所有元素是否都使得$\omega (u)$为false，后者被称为“真验证”，即验证所有元素是否都使得$\omega (u)$为true。检验所有元素就可能造成正无穷</li></ul></li><li><p>对关系演算需要施加约束条件，即任何一个公式都要在一个集合范围内操作，而不是无限范围内操作，才能保证其安全性</p></li></ul><h3 id="安全约束有限集合DOM"><a href="#安全约束有限集合DOM" class="headerlink" title="安全约束有限集合DOM"></a>安全约束有限集合DOM</h3><ul><li>DOM$(\psi)$是一个有限集合，其中的每个符号要么是$\psi$中明显出现的符号，要么是出现在$\psi$ 中的某个关系R的某元组分量</li><li>DOM主要用于约束$\psi$中的一些谓词的计算范围，它不必是最小集合</li></ul><h3 id="元组安全演算表达式"><a href="#元组安全演算表达式" class="headerlink" title="元组安全演算表达式"></a>元组安全演算表达式</h3><p>满足下面三个条件的元组演算表达式${t|\psi(t)}$称为安全表达式</p><ul><li>只要t满足$\psi$，他的每个分量就是DOM$(\psi)$的一个成员</li><li>${t|\psi(t)}$中t的取值只能是DOM中的值，是有限的</li><li>对于$\psi$中形如$(\exists u)(\omega (u))$的子表达式，若u 满足w，则u的每个分量都是DOM(w)的成员</li><li>${t|\psi(t)}$中的每个$(\exists u)(\omega (u))$的子表达式，只需验证DOM中的元素是否有使$\omega (u)$为真的元素，已经明确其都不满足$\omega (u)$，无需验证</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关系模型之关系演算&quot;&gt;&lt;a href=&quot;#关系模型之关系演算&quot; class=&quot;headerlink&quot; title=&quot;关系模型之关系演算&quot;&gt;&lt;/a&gt;关系模型之关系演算&lt;/h1&gt;&lt;h2 id=&quot;1-关系演算之元组演算&quot;&gt;&lt;a href=&quot;#1-关系演算之元组演算&quot; c
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yokeso.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库语言--SQL</title>
    <link href="http://yokeso.github.io/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/"/>
    <id>http://yokeso.github.io/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:48:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库语言——SQL"><a href="#数据库语言——SQL" class="headerlink" title="数据库语言——SQL"></a>数据库语言——SQL</h1><p>SQL语言主要由九个单词引导的操作语句来构成，但每种语句都能表达复杂的操作请求</p><ul><li><p>DDL语句引导词：Create (建立)，Alter（修改），Drop（撤销）</p><ul><li>模式的定义和删除，包括定义Database，Table，View，Index,完整性约束条件等，也包括定义对象（RowType行对象，Type列对象）</li></ul></li><li><p>DML语句引导词：Insert，Delete，Update，Select</p><ul><li>各种方式的更新与检索操作，如直接输入记录。或者从其他Table(由SubQuery建立)输入</li><li>各种复杂条件的检索，如链接查找，模糊查找，分组查找，嵌套查找等</li><li>各种聚集操作，求平均，求和,…等，分组聚集，分组过滤等</li></ul></li><li><p>DCL语句引导词：Grant，Revoke</p><ul><li>安全性控制：授权和撤销授权</li></ul></li></ul><p>交互式SQL-&gt;嵌入式SQL-&gt;动态式SQL</p><h2 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h2><p>建立数据库包括两件事：<strong>定义数据库和表（使用DDL）</strong>，向表中追加元素（使用DML）</p><p>DDL: Data Definition Language</p><ul><li>创建数据库（DB）-Create Database</li><li>创建DB中的Table(定义关系模式)—Create Table</li><li>定义Table及其各个属性的约束条件（定义完整性约束）</li><li>定义View(定义外模式及E-C映像)</li><li>定义Index、Tablespace…..等（定义物理存储参数</li><li>上述各种定义的撤销与修正</li></ul><h3 id="创建Database"><a href="#创建Database" class="headerlink" title="创建Database"></a>创建Database</h3><ul><li>数据库是若干具有相互关联关系的Table/Relation的集合</li><li>数据库可以看作是一个集中存放若干Table的大型文件</li><li>create database的简单语法形式  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名</span><br></pre></td></tr></table></figure><h3 id="创建Table"><a href="#创建Table" class="headerlink" title="创建Table"></a>创建Table</h3><p>简单语法形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(列名 数据类型 [<span class="keyword">Primary</span> key<span class="operator">|</span><span class="keyword">Unique</span>][<span class="keyword">Not</span> <span class="keyword">null</span>]</span><br><span class="line">[列名 数据类型 [<span class="keyword">Not</span> <span class="keyword">null</span>],...]);</span><br></pre></td></tr></table></figure><ul><li>“[ ]”表示其括起的内容可以省略，”|“表示其隔开的两项可取其一</li><li><strong>Primary key</strong>：主键约束。每个表只能创建一个主键约束。</li><li><strong>Unique</strong>：唯一性约束（候选键）。可以由多个唯一性约束</li><li><strong>Not null</strong>：非空约束。是指该列允许不允许有空值出现。如选择了Not null则表明不允许有空值出现</li></ul><h2 id="数据库追加元素"><a href="#数据库追加元素" class="headerlink" title="数据库追加元素"></a>数据库追加元素</h2><p>建立数据库包括两件事：定义数据库和表（使用DDL）<strong>，向表中追加元素（使用DML）</strong></p><p>DML:Data Manipulation Language</p><ul><li>向Table中追加新的元组：Insert</li><li>修改某些元组中的某些属性：Update</li><li>删除Table中的某些元组：Delete</li><li>对Table中的数据进行某种条件的检索：Select</li></ul><p>DML通常由用户或应用程序员使用，访问经授权的数据库</p><h3 id="Insert-向表中追加元组"><a href="#Insert-向表中追加元组" class="headerlink" title="Insert-向表中追加元组"></a>Insert-向表中追加元组</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">Into</span> 表名[(列名 [,列名]...)] </span><br><span class="line">       <span class="keyword">values</span> (值 [,值],...);</span><br></pre></td></tr></table></figure><ul><li>values后面值的排列，需与into子句后面的列名排列一致</li><li>若标名后的所有列名省略，则values后的值的排列，需与该表存储的列名排列一致</li></ul><p><img src="/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/image-20210123153337564.png" alt="image-20210123153337564"></p><p><img src="/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/image-20210124120838523.png" alt="image-20210124120838523"></p><h3 id="Delete-删除表中元组"><a href="#Delete-删除表中元组" class="headerlink" title="Delete-删除表中元组"></a>Delete-删除表中元组</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Delete</span> <span class="keyword">From</span> 表名 [<span class="keyword">Where</span> 条件表达式]</span><br></pre></td></tr></table></figure><p>如果where条件省略，则删除所有的元素</p><h3 id="Update-更新表中元组"><a href="#Update-更新表中元组" class="headerlink" title="Update-更新表中元组"></a>Update-更新表中元组</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Update 表名</span><br><span class="line"><span class="keyword">Set</span> 列名<span class="operator">=</span>表达式<span class="operator">|</span>(子查询)</span><br><span class="line">    [[,列名<span class="operator">=</span>表达式<span class="operator">|</span>(子查询)]...]</span><br><span class="line">[<span class="keyword">Where</span> 条件表达式]; </span><br></pre></td></tr></table></figure><p>如果where 条件省略，则更新所有元组</p><h3 id="Select-检索信息"><a href="#Select-检索信息" class="headerlink" title="Select-检索信息"></a>Select-检索信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> 列名 [[，列名]...]</span><br><span class="line"><span class="keyword">From</span>   表名</span><br><span class="line">[<span class="keyword">Where</span> 检索条件];</span><br></pre></td></tr></table></figure><ul><li>语义：从表名所给出的表中，查询出满足检索条件的元组，并按给定的列名及顺序进行投影显示</li><li>相当于$\prod<em>{列名,…,列名}(\sigma</em>{检索条件}(表名))$</li><li>Select语句中的select….,from…,where…,等被称为子句，在以上基本形式基础上会增加许多构成要素，也会增加许多新的子句，满足不同的需求。</li><li>检索条件用 and，or，not 来表达</li></ul><h4 id="结果唯一性问题"><a href="#结果唯一性问题" class="headerlink" title="结果唯一性问题"></a>结果唯一性问题</h4><p><img src="/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/image-20210123163053033.png" alt="image-20210123163053033"></p><h4 id="结果排序问题"><a href="#结果排序问题" class="headerlink" title="结果排序问题"></a>结果排序问题</h4><p><img src="/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/image-20210123171125801.png" alt="image-20210123171125801"></p><h4 id="模糊查询问题"><a href="#模糊查询问题" class="headerlink" title="模糊查询问题"></a>模糊查询问题</h4><p>比如检索只知道姓氏的学生，Select通过在检索条件中引入运算符like来表示</p><p>含有like运算符的表达式</p><p>​    列名 [not] like “字符串”</p><p>找出匹配给定字符串的字符串，其中给定字符串中可以出现%,__等字符，</p><p>匹配规则：</p><ul><li>%：匹配零个或多个字符</li><li>_：任意匹配单个字符</li><li>\：转义字符，用于去掉一些特殊字符的特定含义，使其被作为普通字符看待</li></ul><h4 id="多表联合查询"><a href="#多表联合查询" class="headerlink" title="多表联合查询"></a>多表联合查询</h4><p>多表联合检索可以通过链接运算来完成，而链接运算又可以通过广义笛卡儿积后再进行选择运算来实现。</p><p>Select的多表联合查询检索语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> 列名 [[,列名]...] </span><br><span class="line"><span class="keyword">From</span>   表名<span class="number">1</span>,表名<span class="number">2</span>,...</span><br><span class="line"><span class="keyword">Where</span>  检索条件;</span><br></pre></td></tr></table></figure><p>检索条件中要包括链接条件，通过不同的链接条件可以实现等值链接，不等值链接以及各种$\theta-$链接</p><p><img src="/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/image-20210124105502924.png" alt="image-20210124105502924"></p><h5 id="重名处理"><a href="#重名处理" class="headerlink" title="重名处理"></a>重名处理</h5><p>连接运算涉及到重名的问题时，如两个表的属性重名，连接的两个表重名（同一表的连接）等，因此需要使用别名以便区分</p><p>select中采用别名的方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> 列名 <span class="keyword">as</span> 列别名[[,列名 <span class="keyword">as</span> 列别名]...]</span><br><span class="line"><span class="keyword">From</span> 表名<span class="number">1</span> <span class="keyword">as</span> 表别名<span class="number">1</span>，表名<span class="number">2</span> <span class="keyword">as</span> 表别名<span class="number">2</span>,...</span><br><span class="line"><span class="keyword">Where</span> 检索条件</span><br></pre></td></tr></table></figure><ul><li>上述定义中的As可以忽略</li><li>当定义了别名之后，在检索条件中可以使用别名来限定属性 </li></ul><h2 id="修正数据库"><a href="#修正数据库" class="headerlink" title="修正数据库"></a>修正数据库</h2><p>修正数据库主要是修正表的定义</p><h5 id="表单修改"><a href="#表单修改" class="headerlink" title="表单修改"></a>表单修改</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tablename</span><br><span class="line">[add &#123;colname datatype,...&#125;]          增加新列</span><br><span class="line">[drop &#123;完整性约束名&#125;]                   删除完整性约束</span><br><span class="line">[modify &#123;colname datatype,...&#125;]       修改列定义</span><br></pre></td></tr></table></figure><h5 id="撤销基本表"><a href="#撤销基本表" class="headerlink" title="撤销基本表"></a>撤销基本表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名                       撤销表</span><br><span class="line"><span class="keyword">drop</span> database 数据库名                 撤销数据库</span><br></pre></td></tr></table></figure><p>注意:delete是删除表中的数据，drop是将整个表单删除</p><h2 id="数据库指定与关闭"><a href="#数据库指定与关闭" class="headerlink" title="数据库指定与关闭"></a>数据库指定与关闭</h2><h5 id="指定当前数据库"><a href="#指定当前数据库" class="headerlink" title="指定当前数据库"></a>指定当前数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名</span><br></pre></td></tr></table></figure><h5 id="关闭当前数据库"><a href="#关闭当前数据库" class="headerlink" title="关闭当前数据库"></a>关闭当前数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">close</span> 数据库名</span><br></pre></td></tr></table></figure><h2 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h2><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><h4 id="为什么需要子查询"><a href="#为什么需要子查询" class="headerlink" title="为什么需要子查询"></a>为什么需要子查询</h4><p>很多情况需要下述条件的判断</p><ul><li><p>集合成员资格</p><ul><li>某一元素是否是某一个集合成员</li></ul></li><li><p>集合之间的比较</p><ul><li>某一集合是否包含另外一个集合等</li></ul></li><li><p>集合基数测试</p><ul><li>测试集合是否为空</li><li>测试集合是否存在重复元组</li></ul></li></ul><p>子查询：出现在Where子句中的Select语句被称为子查询(subquery)，子查询返回了一个集合，可以通过与这个集合的比较来确定另一个查询集合</p><p>三种类型的子查询：(NOT)IN-子查询;$\theta-Some/\theta-All$子查询；Exist子查询</p><h5 id="NOT-IN-子查询："><a href="#NOT-IN-子查询：" class="headerlink" title="(NOT)IN-子查询："></a>(NOT)IN-子查询：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">not</span>] <span class="keyword">in</span> 子查询</span><br></pre></td></tr></table></figure><p>语法中，表达式最简单的形式就是列名或常数</p><p>语义：判断某一表达式的值是否在子查询的结果中</p><p>示例：列出选修了001号课程的学生的学号和姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> S#,Sname <span class="keyword">From</span> Student</span><br><span class="line"><span class="keyword">Where</span> S# <span class="keyword">in</span> (<span class="keyword">Select</span> S# <span class="keyword">From</span> SC <span class="keyword">Where</span> C#<span class="operator">=</span>&quot;001&quot;)</span><br></pre></td></tr></table></figure><p>非相关子查询：内层查询独立进行，没有涉及任何外层查询相关信息的子查询</p><p>相关子查询：内层查询需要依靠外层查询的某些参量作为限定条件才能进行的子查询</p><p>外层向内层传递的参量需要使用外层的表名或者表别名来限定</p><h5 id="theta-Some-theta-All-子查询"><a href="#theta-Some-theta-All-子查询" class="headerlink" title="$\theta-Some/\theta-All$子查询"></a>$\theta-Some/\theta-All$子查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表达式 theta <span class="keyword">some</span> (子查询)</span><br><span class="line">表达式 theta <span class="keyword">all</span> (子查询)</span><br></pre></td></tr></table></figure><p>语法中的$\theta$是比较运算符：&lt;,&gt;,&gt;=,&lt;=,&lt;&gt;,=</p><p>语义：将表达式的值与子查询结果进行比较</p><ul><li>如果表达式的值至少与子查询结果的一个值比较满足$\theta$关系，则“表达式 theta some (子查询)”的结果便为真</li><li>如果表达式的值与子查询的所有结果比较都满足$\theta$关系，则“表达式 theta all (子查询)”的结果便为真</li></ul><h5 id="Exist子查询"><a href="#Exist子查询" class="headerlink" title="Exist子查询"></a>Exist子查询</h5><p><img src="/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/image-20210124173533484.png" alt="image-20210124173533484"></p><h3 id="结果计算"><a href="#结果计算" class="headerlink" title="结果计算"></a>结果计算</h3><p>Select-from-where语句中，Select子句后面不仅可是列名，而且可是一些计算表达式或聚集函数，表名在投影的同时直接进行一些运算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> 列名<span class="operator">|</span>expr<span class="operator">|</span>agfunc(列名) [[,列名<span class="operator">|</span>expr<span class="operator">|</span>agfunc(列名)]...]</span><br><span class="line"><span class="keyword">From</span>   表名[,表名<span class="number">2.</span>..]</span><br><span class="line">[<span class="keyword">Where</span> 检索条件];</span><br></pre></td></tr></table></figure><ul><li>expr 可以是常量、列名、或由常量、列名、特殊函数及算数运算符构成的算数运算式。特殊函数的使用需结合各自DBMS的说明书</li><li>agfunc()是一些聚集函数</li></ul><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>分组：SQL可以将检索到的元组按照某一条件进行分类，具有相同条件值的元组放到一个组或一个集合中，同时处理多个组或聚合的聚集运算</p><p>分组基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> 列名<span class="operator">|</span>expr<span class="operator">|</span>agfunc(列名) [[,列名<span class="operator">|</span>expr<span class="operator">|</span>agfunc(列名)]...]</span><br><span class="line"><span class="keyword">From</span>   表名<span class="number">1</span>[,表名<span class="number">2.</span>..]</span><br><span class="line">[<span class="keyword">Where</span> 检索条件]</span><br><span class="line">[<span class="keyword">Group</span> <span class="keyword">by</span> 分组条件];</span><br></pre></td></tr></table></figure><p>分组条件可以是</p><p>列名1，列名2,…</p><p><img src="/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/image-20210124210211441.png" alt="image-20210124210211441"></p><h3 id="分组过滤"><a href="#分组过滤" class="headerlink" title="分组过滤"></a>分组过滤</h3><p>引入原因：Where子句是对每一元组进行条件过滤而不是对集合进行条件过滤</p><p><strong>分组过滤：</strong>对集合进行条件过滤，满足条件的集合留下，不满足的剔除</p><p>Having子句，又称分组过滤子句。需要有groupBy 子句支持</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> 列名<span class="operator">|</span>expr<span class="operator">|</span>agfunc(列名) [[,列名<span class="operator">|</span>expr<span class="operator">|</span>agfunc(列名)]...]</span><br><span class="line"><span class="keyword">From</span>   表名<span class="number">1</span>[,表名<span class="number">2.</span>..]</span><br><span class="line">[<span class="keyword">Where</span> 检索条件]</span><br><span class="line">[<span class="keyword">Group</span> <span class="keyword">by</span> 分组条件[<span class="keyword">Having</span> 分组过滤条件]];</span><br></pre></td></tr></table></figure><h3 id="并-交-差的处理"><a href="#并-交-差的处理" class="headerlink" title="并-交-差的处理"></a>并-交-差的处理</h3><p>并运算UNION，交运算INTERSECT，差运算EXCEPT。</p><p>基本语法形式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子查询 &#123;Union [ALL]|intersect[ALL]|Except[ALL] 子查询&#125;</span><br></pre></td></tr></table></figure><p>通常情况下自动删除重复元组：不带ALL。若要保留重复元组则要带ALL</p><p><img src="/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/image-20210124214232604.png" alt="image-20210124214232604"></p><h3 id="数据库视图"><a href="#数据库视图" class="headerlink" title="数据库视图"></a>数据库视图</h3><p><img src="/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/Users\Yokeso\AppData\Roaming\Typora\typora-user-images\image-20210126190548381.png" alt="image-20210126190548381"></p><p><img src="/2022/01/18/07%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94SQL/Users\Yokeso\AppData\Roaming\Typora\typora-user-images\image-20210126190607776.png" alt="image-20210126190607776"></p><p>SQL视图更新的可执行性</p><ul><li>如果视图的Select目标列包含聚集函数，则不能更新</li><li>如果视图的select子句使用了unique或distinct，则不能更新</li><li>如果视图中包括了group by子句，则不能更新</li><li>如果视图中包括经算数表达式算出来的列，则不能更新、</li><li>如果视图是由单个表的列构成，但并没有包括主键，则不能更新</li></ul><p>对于由单一Table子集构成的视图，即如果视图是从单个基本表使用选择，投影操作的，并且包含了基本表的主键，则可以更新</p><h3 id="SQL-视图的撤销"><a href="#SQL-视图的撤销" class="headerlink" title="SQL-视图的撤销"></a>SQL-视图的撤销</h3><p>已经定义的视图可以撤销</p><h6 id="撤销视图"><a href="#撤销视图" class="headerlink" title="撤销视图"></a>撤销视图</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Drop</span> <span class="keyword">View</span> view_name</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库语言——SQL&quot;&gt;&lt;a href=&quot;#数据库语言——SQL&quot; class=&quot;headerlink&quot; title=&quot;数据库语言——SQL&quot;&gt;&lt;/a&gt;数据库语言——SQL&lt;/h1&gt;&lt;p&gt;SQL语言主要由九个单词引导的操作语句来构成，但每种语句都能表达复杂的操作请
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yokeso.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库完整性概念及其分类</title>
    <link href="http://yokeso.github.io/2022/01/18/08%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%88%86%E7%B1%BB/"/>
    <id>http://yokeso.github.io/2022/01/18/08%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%88%86%E7%B1%BB/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:48:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库完整性概念及其分类"><a href="#数据库完整性概念及其分类" class="headerlink" title="数据库完整性概念及其分类"></a>数据库完整性概念及其分类</h1><h2 id="数据库完整性"><a href="#数据库完整性" class="headerlink" title="数据库完整性"></a>数据库完整性</h2><p>数据库完整性是指DBMS应保证DB的一种特性——在仍任何情况下的正确性，有效性和一致性</p><ul><li>广义完整性：语义的完整性，并发控制。安全控制，DB故障恢复等</li><li>狭义完整性：专指语义的完整性，DBMS通常由专门的完整性管理机制与程序来处理语义完整i性问题</li></ul><h3 id="关系模型中的完整性要求："><a href="#关系模型中的完整性要求：" class="headerlink" title="关系模型中的完整性要求："></a>关系模型中的完整性要求：</h3><ul><li>实体完整性</li><li>参照完整性</li><li>用户自定义完整性</li></ul><p>引发数据库完整性问题的原因主要是因为不正当的数据库操作（比如输入错误，操作错误，程序处理失误等）</p><h3 id="数据库完整性的作用："><a href="#数据库完整性的作用：" class="headerlink" title="数据库完整性的作用："></a>数据库完整性的作用：</h3><ul><li><p>防止和避免数据库中不合理数据的出现</p></li><li><p>DBMS应尽可能地自动防止DB中语义不合理现象</p><ul><li>DBMS允许用户定义一些完整性约束规则（用SQL-DDL定义）</li><li>当有DB更新操作时，DBMS自动按照完整性约束条件进行检查，以确保更新操作符合语义完整性</li></ul></li></ul><p><img src="/2022/01/18/08%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%88%86%E7%B1%BB/image-20210126211831403.png" alt="数据库完整性作用"></p><h3 id="完整性约束条件的一般形式"><a href="#完整性约束条件的一般形式" class="headerlink" title="完整性约束条件的一般形式"></a>完整性约束条件的一般形式</h3><p><strong>Integrity Constraint ::=(O,P,A,R)</strong></p><ul><li>O 数据集合：约束的对象</li><li>P 谓词条件：什么样的约束</li><li>A 触发条件： 什么时候检查</li><li>R 相应动作：不满足怎么办</li></ul><p><img src="/2022/01/18/08%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%88%86%E7%B1%BB/image-20210126212743875.png" alt="约束的一般形式"></p><h2 id="数据库完整性分类"><a href="#数据库完整性分类" class="headerlink" title="数据库完整性分类"></a>数据库完整性分类</h2><h3 id="域完整性约束条件"><a href="#域完整性约束条件" class="headerlink" title="域完整性约束条件"></a>域完整性约束条件</h3><ul><li>施加于某一列上，对给定列上所要更新的某一后选址是否可以接受进行约束条件判断，这是孤立进行的</li></ul><h3 id="关系完整性约束条件"><a href="#关系完整性约束条件" class="headerlink" title="关系完整性约束条件"></a>关系完整性约束条件</h3><ul><li>施加于关系/table上，对给定table上所要更新的某一候选元组是否可以接受进行约束条件判断，或是对一个关系中的若干元组和另一关系中的若干元组和另一个关系中的若干元组之间联系是否可以接受进行约束条件判断</li></ul><h3 id="按约束来源分类"><a href="#按约束来源分类" class="headerlink" title="按约束来源分类"></a>按约束来源分类</h3><p>结构约束</p><ul><li>来自于模型的约束，例如函数依赖约束、主键约束（实体完整性）、外键约束（参照完整性）、只关心数值是否相等，是否允许空值等</li></ul><p>内容约束</p><ul><li>来自于用户的约束，如用户自定义完整性，关系元组或属性的取值范围。</li></ul><p><img src="/2022/01/18/08%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%88%86%E7%B1%BB/image-20210127122311851.png" alt="内容约束"></p><h3 id="按约束状态分类"><a href="#按约束状态分类" class="headerlink" title="按约束状态分类"></a>按约束状态分类</h3><p>静态约束</p><ul><li>要求DB在任一时候均应该满足的约束</li></ul><p>动态约束</p><ul><li>要求DB从一状态变为另一状态时必须完成的约束</li></ul><p><img src="/2022/01/18/08%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%88%86%E7%B1%BB/image-20210127122527453.png" alt="动态约束"></p><h2 id="SQL实现完整性"><a href="#SQL实现完整性" class="headerlink" title="SQL实现完整性"></a>SQL实现完整性</h2><h3 id="SQL支持以下几种约束"><a href="#SQL支持以下几种约束" class="headerlink" title="SQL支持以下几种约束"></a>SQL支持以下几种约束</h3><ul><li><p>静态约束</p><ul><li>列完整性-域完整性约束</li><li>表完整性-关系完整性约束</li></ul></li><li><p>动态约束</p><ul><li>触发器</li></ul></li></ul><p><img src="/2022/01/18/08%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%88%86%E7%B1%BB/image-20210127122742173.png" alt="SQL支持的约束"></p><h3 id="SQL实现约束方法-Creat-Table"><a href="#SQL实现约束方法-Creat-Table" class="headerlink" title="SQL实现约束方法-Creat Table"></a>SQL实现约束方法-Creat Table</h3><p>Creat Table 有三种功能:定义关系模式,定义完整性约束和定义物理存储特性</p><p>定义完整性约束条件</p><ul><li>列完整性</li><li>表完整性</li></ul><p><img src="/2022/01/18/08%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%88%86%E7%B1%BB/image-20210127123243248.png" alt="列约束和表约束"></p><h4 id="Col-constr列约束"><a href="#Col-constr列约束" class="headerlink" title="Col_constr列约束"></a>Col_constr列约束</h4><p>列约束是一种域约束类型,可以对单一列进行约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;NOT NULL|                         //列值非空</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span> constraintname]    <span class="operator">/</span><span class="operator">/</span>为约束命名.便于以后撤销</span><br><span class="line">         &#123;UNIQUE                   //列值是唯一</span><br><span class="line">          <span class="operator">|</span><span class="keyword">PRIMARY</span> KEY             <span class="operator">/</span><span class="operator">/</span>列为主键</span><br><span class="line">          <span class="operator">|</span><span class="keyword">CHECK</span>(search_cond)      <span class="operator">/</span><span class="operator">/</span>列值满足条件,条件只能使用当前列值</span><br><span class="line">          <span class="operator">|</span><span class="keyword">REFERENCES</span> tablename [(colname)]</span><br><span class="line">                [ON DELETE&#123;CASCADE|SET NULL&#125;]&#125;&#125;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>引用另一表tablename的列colname的值，如有<span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE或<span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>语句，则删除被引用表的某列值v时，要将本表该列值为v的记录删除或列值更新为<span class="keyword">null</span>;缺省为无操作。</span><br></pre></td></tr></table></figure><p>Col_constr 列约束:只能应用在单一列 上，其后面的约束如UNIQUE,PRIMARY KEY及search_cond 只能是单一列唯一、单一列为主键、和单一列相关</p><h4 id="table-constr表约束"><a href="#table-constr表约束" class="headerlink" title="table_constr表约束"></a>table_constr表约束</h4><p>表约束是一种关系型约束.对多列或多元组的值进行约束,列约束是其特例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">CONSTRAINT</span> constraintname]              <span class="operator">/</span><span class="operator">/</span>为约束命名.便于以后撤销</span><br><span class="line">     &#123;UNIQUE  (colname &#123;.colname...&#125;)    //几列值合一起是唯一</span><br><span class="line">      |PRIMARY KEY (colname &#123;.colname...&#125;) //几列联合为主键</span><br><span class="line">      <span class="operator">|</span><span class="keyword">CHECK</span>(search_condition)      <span class="operator">/</span><span class="operator">/</span>元组多列值共同满足条件,</span><br><span class="line">  <span class="operator">/</span><span class="operator">/</span>条件中只能使用同一元组不同列当前值</span><br><span class="line">      |FOREIGN KEY (colname &#123;.colname...&#125;)</span><br><span class="line">           REFERENCES tablename [(colname &#123;.colname...&#125;)]</span><br><span class="line">            [ON DELETE CASCADE]&#125;&#125;</span><br><span class="line">       <span class="operator">/</span><span class="operator">/</span>引用另一表tablename的若干列键值作为外键</span><br></pre></td></tr></table></figure><h2 id="断言ASSERTION"><a href="#断言ASSERTION" class="headerlink" title="断言ASSERTION"></a>断言ASSERTION</h2><p>一个断言就是一个谓词表达式,它表达了希望数据库总能满足的条件.表约束和列约束就是一种特殊的断言</p><p>SQL提供了复杂条件表达的断言.其语法形式为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ASSERTION <span class="operator">&lt;</span>assertion_name<span class="operator">&gt;</span> <span class="keyword">CHECK</span> <span class="operator">&lt;</span>predicate<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>当一个断言创建后,系统将检测其有效性,并在每一次更新中测试更新是否违背断言</p><p><strong>断言测试增加了数据库维护的负担,所以要小心的使用断言</strong></p><h2 id="触发器Trigger"><a href="#触发器Trigger" class="headerlink" title="触发器Trigger"></a>触发器Trigger</h2><ul><li>Create Table中的表约束和列约束基本上都是静态的约束，也基本上都是对单一列或单一元组的约束(尽管有参照完整性)，为实现动态约束以及多个元组之间的完整性约束，就需要触发器技术Trigger</li><li>Trigger是一种过程完整性约束(相比之下，Create Table中定义的都是非过程性约束)，是一段程序，该程序可以在特定的时刻被自动触发执行，比如在一次更新操作之前执行，或在更新操作之后执行。</li></ul><p>基本语法:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name BEFORE<span class="operator">|</span>AFTER</span><br><span class="line">    &#123;INSERT|DELETE|UPDATE [OF folname&#123;,colname...&#125;]&#125;</span><br><span class="line">    ON tablename [REFERENCING corr_name_def &#123;col_name_def&#125;]</span><br><span class="line">    [<span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span><span class="operator">|</span><span class="keyword">FOR</span> <span class="keyword">EACH</span> STATEMENT]   <span class="operator">/</span><span class="operator">/</span>更新操作的每一条结果(前者),或者整个更新操作完成(后者)</span><br><span class="line">    [<span class="keyword">WHEN</span> (search_condition)]           <span class="operator">/</span><span class="operator">/</span>检查条件,如满足执行下面程序</span><br><span class="line">           &#123;statement                   //单行程序直接书写,多行程序要用下行方式</span><br><span class="line">           |BEGIN ATOMIC statement;(statement;..)END&#125;</span><br></pre></td></tr></table></figure><p>触发器Trigger意义:当某一时间发生时(Before|After),对事件产生的结果(或是每一元组,或者操作的所有元组),检查条件search_condition,如果满足条件,则执行后面程序段,条件或程序段中引用的变量可用corr_name_def来限定</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库完整性概念及其分类&quot;&gt;&lt;a href=&quot;#数据库完整性概念及其分类&quot; class=&quot;headerlink&quot; title=&quot;数据库完整性概念及其分类&quot;&gt;&lt;/a&gt;数据库完整性概念及其分类&lt;/h1&gt;&lt;h2 id=&quot;数据库完整性&quot;&gt;&lt;a href=&quot;#数据库完整性&quot;
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yokeso.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库安全性</title>
    <link href="http://yokeso.github.io/2022/01/18/09%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%80%A7/"/>
    <id>http://yokeso.github.io/2022/01/18/09%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%80%A7/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库安全性"><a href="#数据库安全性" class="headerlink" title="数据库安全性"></a>数据库安全性</h1><p>数据库安全性是指DBMS应保证数据库的一种特性:免受非法,非授权用户的使用,泄露,更改和破坏</p><h2 id="数据库安全性概念及分类"><a href="#数据库安全性概念及分类" class="headerlink" title="数据库安全性概念及分类"></a>数据库安全性概念及分类</h2><h3 id="DBMS的安全机制"><a href="#DBMS的安全机制" class="headerlink" title="DBMS的安全机制"></a>DBMS的安全机制</h3><p>自主安全性机制:存取控制</p><ul><li>通过权限在用户之间的传递,使用户自主管理数据库安全性</li></ul><p>强制安全性机制</p><ul><li>通过对数据和用户强制分类,使得不同类别用户能够访问不同类别的数据</li></ul><p>推断控制机制:</p><ul><li>防止通过历史信息,推断出不该被其知道的信息</li><li>防止通过统计信息(通常是聚集信息)推断出私密信息(个体信息)</li></ul><p>数据加密机制:</p><ul><li>通过加密解密实现的机制</li></ul><h3 id="DBA的责任与义务"><a href="#DBA的责任与义务" class="headerlink" title="DBA的责任与义务"></a>DBA的责任与义务</h3><p><img src="/2022/01/18/09%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%80%A7/Users\Yokeso\AppData\Roaming\Typora\typora-user-images\image-20210127230423532.png" alt="image-20210127230423532"></p><h2 id="数据库自主安全性机制"><a href="#数据库自主安全性机制" class="headerlink" title="数据库自主安全性机制"></a>数据库自主安全性机制</h2><h3 id="自主安全性"><a href="#自主安全性" class="headerlink" title="自主安全性"></a>自主安全性</h3><p>通常情况下，自主安全性是通过授权机制来实现的</p><p>用户在使用数据库之前必须在DBA处获得一个账户，并由DBA授予该用户一定权限，该账户的用户依据其所拥有的权限对数据库进行操作，同时，该账户用户也可将其所拥有的权力转授给其他用户，由此实现权限在用户之间的控制和传播</p><ul><li>授权者 ：决定用户权力的人</li><li>授权：授予用户访问的权力</li></ul><h3 id="DBMS自动实现自主安全性"><a href="#DBMS自动实现自主安全性" class="headerlink" title="DBMS自动实现自主安全性"></a>DBMS自动实现自主安全性</h3><p>DBMS允许用户定义一些安全性控制规则</p><p>当由DB访问操作时，DBMS自动按照安全性控制规则进行检查，检查通过则允许访问，不通过则不允许</p><p><img src="/2022/01/18/09%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%80%A7/image-20210128094124876.png" alt="数据库自主安全性控制"></p><p>DBMS将权力和用户结合在一起，形成一个访问规则表，一句该规则表对数据库进行安全性控制</p><script type="math/tex; mode=display">AccesRule::=(S,O,t,P)</script><ul><li>S: 请求主题（用户）</li><li>O: 访问对象</li><li>t:  访问权力</li><li>P： 谓词</li></ul><p>{AccessRule} 通常放在数据字典或系统目录中，构成所有用户对DB的 访问权力</p><p>用户多时，可以按用户组建立访问规则</p><p>访问对象可大可小：属性/字段、记录/元组、关系、数据库</p><p>权力：包括创建、增、删、改、查等</p><p>谓词：拥有权力需满足的条件</p><h2 id="自主安全性实现方式"><a href="#自主安全性实现方式" class="headerlink" title="自主安全性实现方式"></a>自主安全性实现方式</h2><h3 id="1-存储矩阵"><a href="#1-存储矩阵" class="headerlink" title="1.存储矩阵"></a>1.存储矩阵</h3><p><img src="/2022/01/18/09%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%80%A7/image-20210128103155593.png" alt="存储矩阵"></p><h3 id="2-视图"><a href="#2-视图" class="headerlink" title="2.视图"></a>2.视图</h3><p>视图时安全性控制的重要手段</p><p>通过视图可以吸纳之用户对关系中某些数据项的存取，例如：</p><ul><li>视图1： Create  EmpV1 as select * from Employee</li><li>视图2： Create EmpV2 as select Pname ,D# from Employee</li></ul><p>通过视图可将数据访问对象与谓词结合起来，先视用户对关系中某些元组的存取，例如：</p><ul><li>视图1： Create EmpV3 as select * from Emplayee where P# =:UeerId</li><li>视图2： Create EmpV4 as select * from Employee where Head+:UserId</li></ul><p>用户定义视图后，视图便成为新的数据对象，参与到存储矩阵与能力表述中进行描述（可以递归使用）</p><h2 id="SQL实现数据库自主安全性"><a href="#SQL实现数据库自主安全性" class="headerlink" title="SQL实现数据库自主安全性"></a>SQL实现数据库自主安全性</h2><h3 id="SQL语言的用户与权力"><a href="#SQL语言的用户与权力" class="headerlink" title="SQL语言的用户与权力"></a>SQL语言的用户与权力</h3><p>SQL包括DDL，DML，和DCL。数据库安全性控制时属于DCL的范畴</p><p>授权机制——自主安全性；视图的使用</p><p>关系级别：DBA－程序员用户－关系级别（普通用户）</p><ul><li>级别一 Select 读级别</li><li><p>级别二 Modify ：更新</p><ul><li>insert：插入</li><li>UPdate：更新</li><li>Delete ：删除</li></ul></li><li><p>级别三 Create：创建</p><ul><li>Create  ：创建</li><li>ALter ：更新</li><li>Drop ：删除</li></ul></li></ul><p><strong>级别高的权力包含级别低的</strong></p><h3 id="授权命令"><a href="#授权命令" class="headerlink" title="授权命令"></a>授权命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GRANT &#123;all PRIVILEGES|privilege &#123;,privilege&#125;&#125;</span><br><span class="line">   <span class="keyword">ON</span> [<span class="keyword">TABLE</span>] tablename<span class="operator">|</span>viewname</span><br><span class="line">   TO &#123;public|user-id&#123;,user-id&#125;&#125;</span><br><span class="line">   [<span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION]</span><br></pre></td></tr></table></figure><p>user-id：某一个用户账户，由DBA创建的合法账户</p><p>public：允许所有有效账户使用授予的权力</p><p>priviliege 是下面的权力</p><ul><li>SELECT|INSERT|UPDATE|DELETE|ALL PRIVIEDGES</li></ul><p>WITH GRANT OPTION 选项是允许被授权者传播这些权力</p><h3 id="收回授权"><a href="#收回授权" class="headerlink" title="收回授权"></a>收回授权</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REVOKE &#123;all privilrges|priv&#123;,priv...&#125;&#125; ON tablename|viewname</span><br><span class="line">    FROM &#123;public|user&#123;,user...&#125;&#125;;</span><br></pre></td></tr></table></figure><h2 id="安全性授权的其他简介"><a href="#安全性授权的其他简介" class="headerlink" title="安全性授权的其他简介"></a>安全性授权的其他简介</h2><h3 id="自主安全性的授权过程及其问题"><a href="#自主安全性的授权过程及其问题" class="headerlink" title="自主安全性的授权过程及其问题"></a>自主安全性的授权过程及其问题</h3><h4 id="授权过程"><a href="#授权过程" class="headerlink" title="授权过程"></a>授权过程</h4><ul><li>第一步：DBA创建DB为每个用户创建一个账户</li><li>第二步：DBA授予某用户账户级别权力</li><li>具有账户级别的用户可以创建基本表或者视图，他也自动成为该表或该视图的属主账户，拥有该表或该视图的所有访问权力</li><li>拥有属主账户的用户可以将其中的一部分权力授予另外的用户，该用户也可将权力进一步授权给其他的用户</li></ul><h3 id="强制安全性"><a href="#强制安全性" class="headerlink" title="强制安全性"></a>强制安全性</h3><p>强制安全性通过对数据对象进行安全性分级</p><ul><li>绝密，机密，可信，无分类</li></ul><p>同时对用户进行上述的安全性分级从而实现不同级别用户访问不同级别数据的一种机制</p><h3 id="访问规则"><a href="#访问规则" class="headerlink" title="访问规则"></a>访问规则</h3><p><img src="/2022/01/18/09%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%80%A7/image-20210128112306745.png" alt="访问规则"></p><h3 id="强制安全性机制的实现"><a href="#强制安全性机制的实现" class="headerlink" title="强制安全性机制的实现"></a>强制安全性机制的实现</h3><p>DBMS引入强制安全性机制，可以通过扩展关系模式被来实现</p><p><img src="/2022/01/18/09%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%80%A7/image-20210128114145572.png" alt="强制安全性机制的实现"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库安全性&quot;&gt;&lt;a href=&quot;#数据库安全性&quot; class=&quot;headerlink&quot; title=&quot;数据库安全性&quot;&gt;&lt;/a&gt;数据库安全性&lt;/h1&gt;&lt;p&gt;数据库安全性是指DBMS应保证数据库的一种特性:免受非法,非授权用户的使用,泄露,更改和破坏&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yokeso.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式SQL</title>
    <link href="http://yokeso.github.io/2022/01/18/10%20%E5%B5%8C%E5%85%A5%E5%BC%8FSQL/"/>
    <id>http://yokeso.github.io/2022/01/18/10%20%E5%B5%8C%E5%85%A5%E5%BC%8FSQL/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="嵌入式SQL语言"><a href="#嵌入式SQL语言" class="headerlink" title="嵌入式SQL语言"></a>嵌入式SQL语言</h1><h2 id="交互式SQL的局限"><a href="#交互式SQL的局限" class="headerlink" title="交互式SQL的局限"></a>交互式SQL的局限</h2><p>普通用户无法很好的书写SQL</p><p>复杂检索结果难以用一条交互式SQL完成，需要结合高级语言中的循环判断来完成</p><p>解决方法：高级语言+SQL</p><ul><li>既继承了高级语言的过程控制性</li><li>又结合SQL语言复杂结果的非过程性</li><li>同时为数据库操作者提供安全可靠的操作方式：通过应用程序进行操作</li></ul><p>嵌入式SQL：</p><ul><li>将SQL嵌入到高级语言中，这种高级语言又称为宿主语言</li><li>嵌入在宿主语言的SQL与前面介绍的不太相同</li></ul><h2 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题"></a>要解决的问题</h2><p><img src="/2022/01/18/10%20%E5%B5%8C%E5%85%A5%E5%BC%8FSQL/Users\Yokeso\AppData\Roaming\Typora\typora-user-images\image-20210128130153443.png" alt="问题"></p><h2 id="变量声明与数据链接"><a href="#变量声明与数据链接" class="headerlink" title="变量声明与数据链接"></a>变量声明与数据链接</h2><h3 id="变量的声明与使用"><a href="#变量的声明与使用" class="headerlink" title="变量的声明与使用"></a>变量的声明与使用</h3><p>在嵌入式SQL语句中可以出现宿主原因呢语句所使用的变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">select</span> Sname,Sage <span class="keyword">into</span> :vSname,:vSage <span class="keyword">from</span> Student <span class="keyword">where</span> Sname :specName</span><br></pre></td></tr></table></figure><p>需要特殊声明的变量：</p><p><img src="/2022/01/18/10%20%E5%B5%8C%E5%85%A5%E5%BC%8FSQL/Users\Yokeso\AppData\Roaming\Typora\typora-user-images\image-20210128130514167.png" alt="特殊声明"></p><p>变量声明和赋值中，要注意：</p><ul><li><p>宿主程序的字符串变量长度应比字符型字段的长度多一个。因宿主程序的字符串尾部多一个终止符为“\0”，而程序中用双引号描述</p></li><li><p>宿主程序变量类型与数据库字段之间有些是有差异的，有些DBMS可支持自动转换，有些不能。</p></li><li><p>声明的变量，可以在宿主程序中赋值，然后传递给SQL的where等子句中，使SQL语句能够按照指定的要求（可变化的进行检索）</p></li></ul><p><img src="/2022/01/18/10%20%E5%B5%8C%E5%85%A5%E5%BC%8FSQL/Users\Yokeso\AppData\Roaming\Typora\typora-user-images\image-20210128130919048.png" alt="动态赋值"></p><p>嵌入式比交互式SQL语句灵活了一些，只需要改变一下变量值，SQL语句便可以反复使用以检测出不同结果</p><h3 id="程序与数据库的连接和断开"><a href="#程序与数据库的连接和断开" class="headerlink" title="程序与数据库的连接和断开"></a>程序与数据库的连接和断开</h3><p>在嵌入式SQL执行前，首先要与数据库进行链接，不同的DBMS链接语句方式略有差异</p><p>同样在执行后需要断开链接</p><h3 id="SQL执行的提交与撤销"><a href="#SQL执行的提交与撤销" class="headerlink" title="SQL执行的提交与撤销"></a>SQL执行的提交与撤销</h3><p>SQL执行过程中必须有提交和撤销语句才能确认其操作结果</p><p><img src="/2022/01/18/10%20%E5%B5%8C%E5%85%A5%E5%BC%8FSQL/image-20210128131404635.png" alt="提交和撤销"></p><h2 id="事务的概念和特性"><a href="#事务的概念和特性" class="headerlink" title="事务的概念和特性"></a>事务的概念和特性</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>一个存取或或改变数据库内容的一次执行，或者说一条或多条SQL语句的一次执行被看作一个任务</p><p>事务是数据库管理系统提供的控制数据操作的一种手段，通过这一手段，应用程序员将一系列的数据库操作组合在一起作为以一个整体进行操作和控制，以便数据库系统能够提供一致性状态转换保证</p><ul><li>事务一般是由应用程序员提出，因此有开始和结束，结束前需要提前提交或撤销。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Begin</span> Transaction</span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> ...</span><br><span class="line">     ...</span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> ...</span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> consit work<span class="operator">|</span><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">rollback</span> work</span><br><span class="line"><span class="keyword">End</span> Transaction</span><br></pre></td></tr></table></figure><p>在嵌入式SQL程序中，任何一条数据库操纵语句（如exec sql select等）都会引发一个新事物的开始，只要该程序当前没有正在处理的事务。而事务的结束时需要应用程序员通过commit或rollback确认的。因此Begin Transaction 和End Transaction两行语句是不需要的。</p><h3 id="事务的特性：ACID"><a href="#事务的特性：ACID" class="headerlink" title="事务的特性：ACID"></a>事务的特性：ACID</h3><ul><li>原子性Atomicity：DBMS能够保证事务的一组更新操作是原子不可分的，即对于DB而言，要么不做，要么全做</li><li>一致性Consistency：DBMS保证事务的操作状态时正确的，符合一致性的操作规则，它时由进一步隔离性来保证的</li><li>隔离性Isolation：DBMS保证并发执行的多个事务之间互相不受影响，例如两个事务T1和T2，即使并发执行，也相当于先执行了T1，再执行T2，或者先执行了T2，再执行T1。</li><li>持久性Durability：DBMS保证已提交的事务的影响是持久的，被撤销事务的影响是可恢复的</li></ul><h2 id="数据集与游标"><a href="#数据集与游标" class="headerlink" title="数据集与游标"></a>数据集与游标</h2><h3 id="单行结果与多行结果处理的差异"><a href="#单行结果与多行结果处理的差异" class="headerlink" title="单行结果与多行结果处理的差异"></a>单行结果与多行结果处理的差异</h3><p>单行结果可以直接传送到宿主程序的变量中</p><p>多行结果则需要使用游标</p><ul><li>游标是指向某检索记录集的指针</li><li><p>通过这个指针的移动，每次读一行，处理一行，直到结束</p></li><li><p>读一行的操作通过Fetch…into语句实现的，每一次Fetch，都先向下移动指针，然后读取</p></li><li>记录集有结束标识EOF，用来标记后面没有记录了</li></ul><p>游标的使用需要先定义，再打开（执行），一条接着一条处理，最后关闭</p><p><img src="/2022/01/18/10%20%E5%B5%8C%E5%85%A5%E5%BC%8FSQL/image-20210128164623447.png" alt="游标"></p><h3 id="可滚动游标"><a href="#可滚动游标" class="headerlink" title="可滚动游标"></a>可滚动游标</h3><p>标准的游标自开始向结束方向移动，每fetch一次，向结束方向移动一次，一条记录之恶能访问一次</p><p>可滚动游标使指针在记录集之间灵活移动，使每条记录可以被反复访问的一种游标。</p><p><img src="/2022/01/18/10%20%E5%B5%8C%E5%85%A5%E5%BC%8FSQL/image-20210128170114120.png" alt="可滚动游标"></p><h3 id="数据库记录的删除"><a href="#数据库记录的删除" class="headerlink" title="数据库记录的删除"></a>数据库记录的删除</h3><p>一种是查找删除（Delete语句），<strong>一种是定位删除（删除游标对应位置）</strong></p><p>EXEC SQL DELETE FROM tablename [corrname]</p><p>​            WHERE search_condition|<strong>WHERE CURRENT cursor_name</strong></p><h3 id="数据库记录的更新"><a href="#数据库记录的更新" class="headerlink" title="数据库记录的更新"></a>数据库记录的更新</h3><p>一种是查找更新（UPdate语句），<strong>一种是定位更新（更新游标对应位置）</strong></p><h2 id="状态捕获及其处理"><a href="#状态捕获及其处理" class="headerlink" title="状态捕获及其处理"></a>状态捕获及其处理</h2><p>状态，是SQL语句的执行状态，尤其指一些出错状态，有时程序需要知道这些状态并进行处理</p><p>嵌入式SQL中，状态捕获及其处理由三部分构成</p><ul><li><p>设置SQL通信去：一般在嵌入式SQL程序的开始处便设置</p><ul><li>exec sql include sqlca</li></ul></li><li><p>设置状态捕获语句 在嵌入式程序任何位置都可设置，可以多次设置，但是由作用域</p><ul><li>exec sql whenever sqlerror goto report_error</li></ul></li><li><p>状态处理语句：某一段程序以应对SQL操作的某种状态</p><ul><li>report_error:exec sql rollback</li></ul></li></ul><h3 id="SQL通信机制：SQLCA"><a href="#SQL通信机制：SQLCA" class="headerlink" title="SQL通信机制：SQLCA"></a>SQL通信机制：SQLCA</h3><p><img src="/2022/01/18/10%20%E5%B5%8C%E5%85%A5%E5%BC%8FSQL/image-20210128172220301.png" alt="SQLCA"></p><h4 id="状态捕获语句"><a href="#状态捕获语句" class="headerlink" title="状态捕获语句"></a>状态捕获语句</h4><p>exec sql whenever condition action;</p><p>Whenever语句是设置一个”条件陷阱，条件语句会由Exec SQL 语句所引起的对数据库系统的调用自动检查是否满足条件（condition）“</p><ul><li>SQLERROR：检测是否有SQL语句出错，并具体意义依赖于特定的DBMS</li><li>INOT　FOUND：执行某一SQL语句后，没有相应的结果记录出现</li><li>SQLWARNING：不是错误，但应该引起注意的条件</li></ul><p>如果满足condition,则要采取一些动作(由action指出)</p><ul><li>CONTINUE:忽略条件或错误，继续执行</li><li>GOTO标号:转移到标号所指示的语句，去进行相应的处理</li><li>STOP:终止程序运行、撤消当前的工作、断开数据库的连接</li><li>DO函数或CALL函数:调用宿主程序的函数进行处理，函数返回后从引发该condition的Exec SQL语句之后的语句继续进行</li></ul><p>Whenever语句的范围是其后所有的Exec SQL语句，一直到程序中出现另外一条相同条件的Whenever为止，后面的覆盖前面的</p><p><img src="/2022/01/18/10%20%E5%B5%8C%E5%85%A5%E5%BC%8FSQL/image-20210128173336071.png" alt="image-20210128173336071"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;嵌入式SQL语言&quot;&gt;&lt;a href=&quot;#嵌入式SQL语言&quot; class=&quot;headerlink&quot; title=&quot;嵌入式SQL语言&quot;&gt;&lt;/a&gt;嵌入式SQL语言&lt;/h1&gt;&lt;h2 id=&quot;交互式SQL的局限&quot;&gt;&lt;a href=&quot;#交互式SQL的局限&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yokeso.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>动态SQL的概念</title>
    <link href="http://yokeso.github.io/2022/01/18/11%20%E5%8A%A8%E6%80%81SQL%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>http://yokeso.github.io/2022/01/18/11%20%E5%8A%A8%E6%80%81SQL%E7%9A%84%E6%A6%82%E5%BF%B5/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:48:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态SQL的概念"><a href="#动态SQL的概念" class="headerlink" title="动态SQL的概念"></a>动态SQL的概念</h1><p>动态SQL是相对与静态SQL而言的</p><p>静态SQL特点是SQL语句已经按要求写好，只需要将一些参数通过变量传送给嵌入式SQL语句即可</p><p>动态SQL则是在程序中动态构造，形成一个字符串，再交给DBMS执行，交给DBMS执行的时候仍旧可以传递变量</p><h2 id="数据字典与SQLDA"><a href="#数据字典与SQLDA" class="headerlink" title="数据字典与SQLDA"></a>数据字典与SQLDA</h2><p>数据字典又称为系统目录，是系统维护的一些表或视图的集合，者写表或驶入存储了数据中各类对象的定义信息，这些对象包括Create语句定义的表，列，索引，视图，权限，约束等，这些信息又称为数据库的元数据——关于数据的数据</p><p>不同DBMS术语不一样：数据字典、目录表、系统目录、系统视图</p><p>不同DBMS中系统目录存储方式可能是不同的，但会有一些信息对DBA公开。这些公开的信息，DBA可以使用一些特殊的SQL来检索</p><h3 id="数据字典的内容构成"><a href="#数据字典的内容构成" class="headerlink" title="数据字典的内容构成"></a>数据字典的内容构成</h3><p>数据字典通常存储的是数据库和表的元数据，即模式本身信息</p><ul><li><p>与关系相关信息</p><ul><li>关系名字</li><li>每个视图的属性名及其类型</li><li>视图的名字及其定义</li><li>完整性约束</li></ul></li><li><p>用户与账户信息，包括密码</p></li><li>统计与描述性数据：如每个关系中元组的数目</li><li><p>物理文件组织信息</p><ul><li>关系是如何存储的（顺序/无序/散列等）</li><li>关系的物理位置</li></ul></li><li><p>索引相关信息</p></li></ul><h3 id="数据字典的结构"><a href="#数据字典的结构" class="headerlink" title="数据字典的结构"></a>数据字典的结构</h3><ul><li>也是存储在磁盘上的关系</li><li>专门为内存高雄啊访问设计的特定的数据结构</li></ul><p>可能的字典数据结构</p><h4 id="X-Open标准系统目录"><a href="#X-Open标准系统目录" class="headerlink" title="X/Open标准系统目录"></a>X/Open标准系统目录</h4><p><img src="/2022/01/18/11%20%E5%8A%A8%E6%80%81SQL%E7%9A%84%E6%A6%82%E5%BF%B5/image-20210129135827140.png" alt="X/Open标准系统目录"></p><h4 id="Oracle的用户字典"><a href="#Oracle的用户字典" class="headerlink" title="Oracle的用户字典"></a>Oracle的用户字典</h4><p><img src="/2022/01/18/11%20%E5%8A%A8%E6%80%81SQL%E7%9A%84%E6%A6%82%E5%BF%B5/image-20210129140029952.png" alt="Oracle"></p><h3 id="SQLDA"><a href="#SQLDA" class="headerlink" title="SQLDA"></a>SQLDA</h3><p>SQLDA是一个内存数据结构，内可装载关系模式的定义信息，如列的数目，每一列的名字和类型等等</p><p>通过读取SQLDA信息可以进行更为复杂的动态SQL处理</p><p>不同的DBMS提供的SQLDA格式并不是一致的</p><h3 id="ODBC"><a href="#ODBC" class="headerlink" title="ODBC"></a>ODBC</h3><p>ODBC是一种不同语言的应用程序与不同数据库服务器之间的通讯标准</p><p>是一组API，支持应用程序与数据库服务器的交互</p><p>应用程序通过调用ODBC　API，实现</p><ul><li>与数据服务器的链接</li><li>向数据库服务器发送SQL命令</li><li>一条一条的提取数据库检索结果中的元组传递给应用程序的变量</li></ul><p>具体的DBMS提供一套驱动程序，即Driver库函数，供ODBC调用，以便数据库与应用程序的链接</p><p>ODBC可以配合很多高级语言使用</p><h4 id="应用程序如何通过ODBC链接一个数据库服务器"><a href="#应用程序如何通过ODBC链接一个数据库服务器" class="headerlink" title="应用程序如何通过ODBC链接一个数据库服务器"></a>应用程序如何通过ODBC链接一个数据库服务器</h4><p><img src="/2022/01/18/11%20%E5%8A%A8%E6%80%81SQL%E7%9A%84%E6%A6%82%E5%BF%B5/image-20210129142339170.png" alt="image-20210129142339170"></p><p><img src="/2022/01/18/11%20%E5%8A%A8%E6%80%81SQL%E7%9A%84%E6%A6%82%E5%BF%B5/image-20210129143822120.png" alt="ODBC其他功能"></p><h4 id="JDBC——JAVA版的ODBC"><a href="#JDBC——JAVA版的ODBC" class="headerlink" title="JDBC——JAVA版的ODBC"></a>JDBC——JAVA版的ODBC</h4><p><img src="/2022/01/18/11%20%E5%8A%A8%E6%80%81SQL%E7%9A%84%E6%A6%82%E5%BF%B5/image-20210129143945524.png" alt="JDBC功能"></p><p><img src="/2022/01/18/11%20%E5%8A%A8%E6%80%81SQL%E7%9A%84%E6%A6%82%E5%BF%B5/image-20210129144009838.png" alt="image-20210129144009838"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态SQL的概念&quot;&gt;&lt;a href=&quot;#动态SQL的概念&quot; class=&quot;headerlink&quot; title=&quot;动态SQL的概念&quot;&gt;&lt;/a&gt;动态SQL的概念&lt;/h1&gt;&lt;p&gt;动态SQL是相对与静态SQL而言的&lt;/p&gt;
&lt;p&gt;静态SQL特点是SQL语句已经按要求写好，
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yokeso.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>依赖关系</title>
    <link href="http://yokeso.github.io/2022/01/18/13%20%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/"/>
    <id>http://yokeso.github.io/2022/01/18/13%20%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h1><h2 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h2><p>函数依赖的定义：设R(U)是属性集合</p><script type="math/tex; mode=display">U=\{A_1,A_2...A_n\}</script><p>上的一个关系模式，X，Y是U上两个子集，若对R(U)的任意一个可能的关系r，r中不可能有两个元组满足在X中的属性值相等而在Y中的属性值不等，则称“X函数决定Y”或“Y函数依赖于X”记作X-&gt;Y </p><h3 id="函数依赖的特性"><a href="#函数依赖的特性" class="headerlink" title="函数依赖的特性"></a>函数依赖的特性</h3><p><img src="/2022/01/18/13%20%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/image-20210202151717689.png" alt></p><h3 id="完全函数依赖与传递函数依赖"><a href="#完全函数依赖与传递函数依赖" class="headerlink" title="完全函数依赖与传递函数依赖"></a>完全函数依赖与传递函数依赖</h3><p><img src="/2022/01/18/13%20%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/image-20210202155400640.png" alt="image-20210202155400640"></p><p><img src="/2022/01/18/13%20%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/image-20210202155942263.png" alt="image-20210202155942263"></p><h3 id="函数相关的几个重要概念"><a href="#函数相关的几个重要概念" class="headerlink" title="函数相关的几个重要概念"></a>函数相关的几个重要概念</h3><p>候选键</p><p><img src="/2022/01/18/13%20%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/image-20210202160300991.png" alt="image-20210202160300991"></p><p>外来键</p><p><img src="/2022/01/18/13%20%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/image-20210202160436387.png" alt="image-20210202160436387"></p><p>闭包</p><p>被F逻辑蕴含的所有函数依赖的集合称为F的闭包，记作F’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;依赖关系&quot;&gt;&lt;a href=&quot;#依赖关系&quot; class=&quot;headerlink&quot; title=&quot;依赖关系&quot;&gt;&lt;/a&gt;依赖关系&lt;/h1&gt;&lt;h2 id=&quot;函数依赖&quot;&gt;&lt;a href=&quot;#函数依赖&quot; class=&quot;headerlink&quot; title=&quot;函数依赖&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yokeso.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据建模与数据库设计</title>
    <link href="http://yokeso.github.io/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yokeso.github.io/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:47:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据建模与数据库设计"><a href="#数据建模与数据库设计" class="headerlink" title="数据建模与数据库设计"></a>数据建模与数据库设计</h1><h2 id="数据模型与概念模型"><a href="#数据模型与概念模型" class="headerlink" title="数据模型与概念模型"></a>数据模型与概念模型</h2><p>表达计算机世界的模型乘坐数据模型；表达信息世界的模型称为该奶奶数据模型，简称概念模型，信息世界是对现实世界的理解与抽象</p><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/Users\Yokeso\AppData\Roaming\Typora\typora-user-images\image-20210129224502779.png" alt="image-20210129224502779"></p><h2 id="实体与实例"><a href="#实体与实例" class="headerlink" title="实体与实例"></a>实体与实例</h2><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>实体：客观存在并可相互区分的事务</p><p>实体有类（实体，实体的型）和个体（实体的实例。实体的值）的概念</p><p>实体用<strong>属性</strong>来刻画  <strong>属性</strong>是实体具有的某一方面的特性</p><h5 id="属性分类"><a href="#属性分类" class="headerlink" title="属性分类"></a>属性分类</h5><ul><li><strong>单一属性和复合属性</strong>，在关系模型中，复合属性一定要转化为单一属性（关系中的1范式）</li><li><strong>单值属性和多值属性</strong>：每个实例的该属性值是一个还是多个</li><li><strong>可空值属性和非空值属性</strong></li><li><strong>导出属性</strong>（由其他属性通过计算得到）</li></ul><p>属性最重要的特点的<strong>关键字/码</strong>，表示实体中能够哟弄个其值唯一区分开每一实例的属性或属性组合</p><p>实体之间是有<strong>联系</strong>的，<strong>联系</strong>是指一个实体的实例和其他实体实例之间所可能发生的联系。</p><p><strong>角色</strong>：实体在联系中的作用</p><p>实体之间的联系可以有很多种类</p><h5 id="二元联系"><a href="#二元联系" class="headerlink" title="二元联系"></a>二元联系</h5><p>一对一，一对多，多对多</p><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210130103226008.png" alt="二元联系"></p><p>联系的<strong>基数</strong>：实体实例之间联系的数量，即一个实体的实例通过一个联系能与另一实体中相关联的实例的数目</p><p>进一步，联系的基数还要区分0个，1个，不定数目的多个还是固定数目的多个（即每个实体的实例而言是否必须存在）</p><p>通常以实体参与联系的最小基数和最大基数来标记（MInCard..MaxCard）</p><ul><li><strong>书架</strong>参与<strong>存放图书</strong>联系的基数为(0..m)，而图书参与此联系的基数为（1..1）</li><li>一个书架可以存放0或多本图书，但一本图书只能存放在一个书架</li></ul><p>完全参与联系，即该端实例至少有一个参与到联系中，最小基数为1（1..m）;</p><p>部分参与联系：即该端实例可以不参与联系，最小基数为0（0..m）</p><h2 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h2><h3 id="E-R模型表达方法之chen方法"><a href="#E-R模型表达方法之chen方法" class="headerlink" title="E-R模型表达方法之chen方法"></a>E-R模型表达方法之chen方法</h3><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210130105208413.png" alt="chen方法"></p><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210130105355140.png" alt="联系的区分"> </p><h3 id="E-R模型表达方法之Crow’s-foot方法"><a href="#E-R模型表达方法之Crow’s-foot方法" class="headerlink" title="E-R模型表达方法之Crow’s foot方法"></a>E-R模型表达方法之Crow’s foot方法</h3><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210130173504426.png" alt="Crow&#39;s foot"></p><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210130173548589.png" alt="联系"></p><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210130173630366.png" alt="联系的基数表示"></p><h2 id="数据库设计的抽象"><a href="#数据库设计的抽象" class="headerlink" title="数据库设计的抽象"></a>数据库设计的抽象</h2><p>型与值</p><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210130190431385.png" alt="不同层次的抽象"></p><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210130190629696.png" alt="数据模型与概念模型"></p><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210130191305331.png" alt="分层级抽象"></p><h2 id="建模的不同层次：模型与元模型，模型（型）与实例（值）"><a href="#建模的不同层次：模型与元模型，模型（型）与实例（值）" class="headerlink" title="建模的不同层次：模型与元模型，模型（型）与实例（值）"></a>建模的不同层次：模型与元模型，模型（型）与实例（值）</h2><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210131094716351.png" alt="建模层次"></p><h2 id="IDEF1x"><a href="#IDEF1x" class="headerlink" title="IDEF1x"></a>IDEF1x</h2><h4 id="实体-1"><a href="#实体-1" class="headerlink" title="实体"></a>实体</h4><p>实体表示现实和抽象事物的集合，这些事物必须具有相同的属性和特征。这个集合的一个元素就是该实体的一个实例</p><ul><li>实体分为独立实体和从属实体</li><li>在扩展E-R图中，<strong>独立实体</strong>又称为强实体，<strong>从属实体</strong>又称弱实体</li></ul><p>独立实体：一个实体的实例都被唯一的标识而不决定与它与其他实体的联系</p><p>从属实体：一个实体的实例唯一标识需要依赖于该实体与其他实体之间的联系</p><p>从属实体需要从其他实体继承属性作为关键字的一部分</p><h3 id="关于实体的规则"><a href="#关于实体的规则" class="headerlink" title="关于实体的规则"></a>关于实体的规则</h3><p>关于实体的规则：工程化要求</p><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210131103736957.png" alt="实体规则"></p><h3 id="标定联系与非标定联系"><a href="#标定联系与非标定联系" class="headerlink" title="标定联系与非标定联系"></a>标定联系与非标定联系</h3><p>子实体的实例能够被唯一标识而无需依赖与其实体的联系，父实体的主关键字不视子实体的主关键字</p><p><img src="/2022/01/18/12%E3%80%80%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20210131110031592.png" alt="image-20210131110031592"></p><h3 id="分类联系"><a href="#分类联系" class="headerlink" title="分类联系"></a>分类联系</h3><p>分类联系：一个实体实例是由一个一般实体实例及多个分类实体实例构成的</p><ul><li>一个一般实体是若干具体实体（分类实体）的类</li><li>分类实体与一般实体具有相同的主关键字</li><li>不同分类实体除具有一啊不能是实体特征外，各自还可能具有不同的属性特征</li></ul><h3 id="具体化"><a href="#具体化" class="headerlink" title="具体化"></a>具体化</h3><p>实体的实例集中，某些实例子集具有区别于该实例集内其他实例的特性，可以根据这些差异特性对该实例进行分组，这一分组的过程称为具体化</p><p>自顶向下，逐步求精</p><h3 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h3><p>若干个实体根据共有的性质，可以合成一个较高层的实体</p><p><strong>泛化和具体化在E-R图中用标记为ISa的三角形标识</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据建模与数据库设计&quot;&gt;&lt;a href=&quot;#数据建模与数据库设计&quot; class=&quot;headerlink&quot; title=&quot;数据建模与数据库设计&quot;&gt;&lt;/a&gt;数据建模与数据库设计&lt;/h1&gt;&lt;h2 id=&quot;数据模型与概念模型&quot;&gt;&lt;a href=&quot;#数据模型与概念模型&quot; c
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yokeso.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>模式分解存在的问题</title>
    <link href="http://yokeso.github.io/2022/01/18/15%20%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yokeso.github.io/2022/01/18/15%20%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模式分解存在的问题"><a href="#模式分解存在的问题" class="headerlink" title="模式分解存在的问题"></a>模式分解存在的问题</h1><h2 id="模式分解"><a href="#模式分解" class="headerlink" title="模式分解"></a>模式分解</h2><p>模式分解是指用R的一组子集来替代这个关系</p><h3 id="投影链接"><a href="#投影链接" class="headerlink" title="投影链接"></a>投影链接</h3><p><img src="/2022/01/18/15%20%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/image-20210203113352039.png" alt="image-20210203113352039"></p><p>模式分解需要关注：</p><p>R与p在数据内容方面是否等价：分解的无损连接性</p><p>R与p在数据依赖方面是否等价：分解的保持依赖性</p><p><img src="/2022/01/18/15%20%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/image-20210203114626676.png" alt="image-20210203114626676"></p><h2 id="无损链接分解"><a href="#无损链接分解" class="headerlink" title="无损链接分解"></a>无损链接分解</h2><p>对于关系模式R(U,F),U是全局属性，F是函数依赖集合，$p={R_1,…,R_k}$是R 的一个分解，如果对于R的任何满足函数依赖集F的关系r，有</p><script type="math/tex; mode=display">r=m_\rho(r)</script><p>则称$\rho$是R相对于F的一个无损链接分解，其中</p><p><img src="/2022/01/18/15%20%E6%A8%A1%E5%BC%8F%E5%88%86%E8%A7%A3%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/image-20210203120557755.png" alt="image-20210203120557755"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;模式分解存在的问题&quot;&gt;&lt;a href=&quot;#模式分解存在的问题&quot; class=&quot;headerlink&quot; title=&quot;模式分解存在的问题&quot;&gt;&lt;/a&gt;模式分解存在的问题&lt;/h1&gt;&lt;h2 id=&quot;模式分解&quot;&gt;&lt;a href=&quot;#模式分解&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关系数据库模型</title>
    <link href="http://yokeso.github.io/2022/01/18/2.%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yokeso.github.io/2022/01/18/2.%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-01-18T02:22:28.000Z</published>
    <updated>2022-01-18T02:49:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-关系数据库模型"><a href="#2-关系数据库模型" class="headerlink" title="[2] 关系数据库模型"></a>[2] 关系数据库模型</h1><h2 id="2-1什么是关系"><a href="#2-1什么是关系" class="headerlink" title="2.1什么是关系"></a>2.1什么是关系</h2><h3 id="1-什么是表"><a href="#1-什么是表" class="headerlink" title="1.什么是表"></a>1.什么是表</h3><p><img src="/2022/01/18/2.%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B/image-20210118152305959.png" alt="image-20210118152305959" style="zoom:50%;"></p><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><p>域：列的取值范围，是一组值的集合，这组值具有相同的数据类型</p><ul><li>如：整数的集合，字符串的集合</li><li>集合中的元素的个数叫做域的<strong>基数</strong></li></ul><h3 id="笛卡儿积"><a href="#笛卡儿积" class="headerlink" title="笛卡儿积"></a>笛卡儿积</h3><ul><li><p>一组域D1，D2…Dn的笛卡尔积的笛卡尔积为：</p><script type="math/tex; mode=display">D_1\times D_2\times.....\times D_n=\{ (d_1,d_2,....,d_n)|d_i\in D_i,i=1,....n\}</script></li><li><p>笛卡尔积的每个元素$(d_1,d_2,….d_n)$称作一个n-元组</p></li><li><p>元组$(d_1,d_2,….d_n)$的每一个值$d_i$叫做一个分量</p></li><li>元组$(d_1,d_2,….d_n)$是从每个域任取一个值形成的组合，笛卡尔积是所有这种可能组合的集合，即笛卡儿积是由n个域形成的所有可能的n-元组的集合</li><li>若$D_i$的奇数为$m_i$则笛卡尔积的奇数即元组个数即为：$m_1 \times m_2 \times… \times m_n$</li></ul><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>关系：一组域D1，D2…Dn的笛卡尔积的子集，笛卡尔积中具有某一方面意义的元组被称为一个关系</p><ul><li>理论上，关系的任两个元组不能完全相同，现实应用中，表(Table)可能并不完全遵守此特性</li><li>关系可用$R(A_1:D_1,A_2:D_2,….A_n:D_n,)$表示，可简记为$R(A_1,A_2,….A_n,)$,这种描述又称为<strong>关系模式</strong>或表标题<ul><li>其中R是关系的名字，$A_i$是属性，$D_i$是属性对应的域，n是关系的<strong>度</strong>或<strong>目</strong>，关系中的元组的数目称为关系的<strong>基数</strong></li></ul></li></ul><h5 id="关系的特性："><a href="#关系的特性：" class="headerlink" title="关系的特性："></a>关系的特性：</h5><ul><li>每一列中的分量来自同一域，是同一类型的数据</li><li>不同的列可以来自同一个域，其中的每一个列为一个属性，不同的属性要基于不同的属性名</li><li>行列的互换性（区分不是靠位置而是靠值）</li><li>理论上关系的任意两个元组不能完全相同</li><li>关系第一范式：属性不可再分</li></ul><h3 id="候选键（candidate-key-）"><a href="#候选键（candidate-key-）" class="headerlink" title="候选键（candidate key ）"></a>候选键（candidate key ）</h3><ul><li><p>一个<strong>属性组</strong>， 其值能唯一标识一个元组，若从该属性组中去掉任何一个属性，它就不具备这一性质了，这样的属性组称为<strong>候选键</strong></p></li><li><p>有时关系中有很多组候选码</p></li></ul><h3 id="主键（primany-key）"><a href="#主键（primany-key）" class="headerlink" title="主键（primany key）"></a>主键（primany key）</h3><p>有多个候选码时，可以选一个作为主码/主键</p><p>DBMS以主码为主要线索管理关系中的各个元组</p><h3 id="主属性与非主属性"><a href="#主属性与非主属性" class="headerlink" title="主属性与非主属性"></a>主属性与非主属性</h3><p>包含在任何一个候选码中的属性被称作主属性，而其他属性被称作非主属性</p><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><ul><li><p>关系R中的一个属性组，它不是R的候选码，但它与另一个关系S的候选 码相对应，则称这个属性组为R的外码或外键</p></li><li><p>两个关系是靠外码连接起来的</p></li></ul><h2 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h2><p><strong>实体完整性</strong></p><ul><li>关系中主码的属性值不能为空（空值：不知道或无意义的值）</li><li>其他情况下存在空值需要特殊处理，需要特别注意</li></ul><p><strong>参照完整性</strong></p><ul><li>如果关系R1的外码Fk与关系R2的主码Pk相对应，则R1中的每一个元组的 Fk值或者等于R2 中某个元组的Pk 值， 或者为空值</li></ul><p><strong>用户自定义完整性</strong></p><ul><li>如S#要求是10位整数</li><li>性别只能是男/女</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-关系数据库模型&quot;&gt;&lt;a href=&quot;#2-关系数据库模型&quot; class=&quot;headerlink&quot; title=&quot;[2] 关系数据库模型&quot;&gt;&lt;/a&gt;[2] 关系数据库模型&lt;/h1&gt;&lt;h2 id=&quot;2-1什么是关系&quot;&gt;&lt;a href=&quot;#2-1什么是关系&quot; cla
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="http://yokeso.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yokeso.github.io/2021/03/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yokeso.github.io/2021/03/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-03-20T13:17:36.000Z</published>
    <updated>2021-04-10T14:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式是一种文本模式，能够便捷高效的处理文本，赋予使用者描述和分析文本的能力。正则表达式能够添加，删除，分离，叠加、插入和修整各种类型的文本和数据。</p><p>正则表达式由两种字符构成：特殊字符（元字符），以及普通文本。究其根本，正则表达式就是通过符号上的表述去匹配一个字符串的通式，处于4NF的内部。</p><span id="more"></span><p>乍一眼看上去正则表达式很难，找不到头绪，但实际上正则表达式很简单，我更喜欢把他看作是一种变形的数学公式。在具有公式（规则）后通过几种解题方法就能轻松的进行解题（匹配字符串）我们只需要掌握它的规则和用法就可以了。</p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li>表达式全集</li><li>常用正则表达式</li><li>常用函数</li><li>示例代码</li></ul><hr><h4 id="表达式全集"><a href="#表达式全集" class="headerlink" title="表达式全集"></a>表达式全集</h4><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td></tr><tr><td style="text-align:center">{<em>n</em>}</td><td style="text-align:center"><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，“<code>o&#123;2&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td></tr><tr><td style="text-align:center">{<em>n</em>,}</td><td style="text-align:center"><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，“<code>o&#123;2,&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o&#123;1,&#125;</code>”等价于“<code>o+</code>”。“<code>o&#123;0,&#125;</code>”则等价于“<code>o*</code>”。</td></tr><tr><td style="text-align:center">{<em>n</em>,<em>m</em>}</td><td style="text-align:center"><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，“<code>o&#123;1,3&#125;</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o&#123;0,1&#125;</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">当该字符紧跟在任何一个其他限制符（<em>,+,?，{</em>n<em>}，{</em>n<em>,}，{</em>n<em>,</em>m*}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除“<code>\</code><em><code>n</code></em>”之外的任何单个字符。要匹配包括“<code>\</code><em><code>n</code></em>”在内的任何字符，请使用像“`(.</td><td>\n)`”的模式。</td></tr><tr><td style="text-align:center">(pattern)</td><td style="text-align:center">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>\)</code>”。</td></tr><tr><td style="text-align:center">(?:pattern)</td><td style="text-align:center">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td><td>)<code>”来组合一个模式的各个部分是很有用。例如“</code>industr(?:y</td><td>ies)<code>”就是一个比“</code>industry</td><td>industries`”更简略的表达式。</td></tr><tr><td style="text-align:center">(?=pattern)</td><td style="text-align:center">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td><td>98</td><td>NT</td><td>2000)<code>”能匹配“</code>Windows2000<code>”中的“</code>Windows<code>”，但不能匹配“</code>Windows3.1<code>”中的“</code>Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:center">(?!pattern)</td><td style="text-align:center">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td><td>98</td><td>NT</td><td>2000)<code>”能匹配“</code>Windows3.1<code>”中的“</code>Windows<code>”，但不能匹配“</code>Windows2000<code>”中的“</code>Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td></tr><tr><td style="text-align:center">(?&lt;=pattern)</td><td style="text-align:center">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td><td>98</td><td>NT</td><td>2000)Windows<code>”能匹配“</code>2000Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>3.1Windows<code>”中的“</code>Windows`”。</td></tr><tr><td style="text-align:center">(?&lt;!pattern)</td><td style="text-align:center">反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td><td>98</td><td>NT</td><td>2000)Windows<code>”能匹配“</code>3.1Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>2000Windows<code>”中的“</code>Windows`”。</td></tr><tr><td style="text-align:center">x\</td><td style="text-align:center">y</td><td>匹配x或y。例如，“`z</td><td>food<code>”能匹配“</code>z<code>”或“</code>food<code>”。“</code>(z</td><td>f)ood<code>”则匹配“</code>zood<code>”或“</code>food`”。</td></tr><tr><td style="text-align:center">[xyz]</td><td style="text-align:center">字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td></tr><tr><td style="text-align:center"><sup><a href="#fn_xyz" id="reffn_xyz">xyz</a></sup></td><td style="text-align:center">负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td></tr><tr><td style="text-align:center">[a-z]</td><td style="text-align:center">字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td></tr><tr><td style="text-align:center"><sup><a href="#fn_a-z" id="reffn_a-z">a-z</a></sup></td><td style="text-align:center">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td></tr><tr><td style="text-align:center">\B</td><td style="text-align:center">匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td></tr><tr><td style="text-align:center">\cx</td><td style="text-align:center">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配一个数字字符。等价于[0-9]。</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">匹配一个非数字字符。等价于<sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup>。</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">匹配一个换页符。等价于\x0c和\cL。</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">匹配一个换行符。等价于\x0a和\cJ。</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">匹配一个回车符。等价于\x0d和\cM。</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配任何非空白字符。等价于<sup><a href="#fn_ \f\n\r\t\v" id="reffn_ \f\n\r\t\v"> \f\n\r\t\v</a></sup>。</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">匹配一个制表符。等价于\x09和\cI。</td></tr><tr><td style="text-align:center">\v</td><td style="text-align:center">匹配一个垂直制表符。等价于\x0b和\cK。</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td></tr><tr><td style="text-align:center">\x<em>n</em></td><td style="text-align:center">匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td></tr><tr><td style="text-align:center">*num*</td><td style="text-align:center">匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td></tr><tr><td style="text-align:center">*n*</td><td style="text-align:center">标识一个八进制转义值或一个向后引用。如果*n<em>之前至少</em>n<em>个获取的子表达式，则</em>n<em>为向后引用。否则，如果</em>n<em>为八进制数字（0-7），则</em>n*为一个八进制转义值。</td></tr><tr><td style="text-align:center">*nm*</td><td style="text-align:center">标识一个八进制转义值或一个向后引用。如果*nm<em>之前至少有</em>nm<em>个获得子表达式，则</em>nm<em>为向后引用。如果\</em>nm<em>之前至少有</em>n<em>个获取，则</em>n<em>为一个后跟文字</em>m<em>的向后引用。如果前面的条件都不满足，若</em>n<em>和</em>m<em>均为八进制数字（0-7），则\</em>nm<em>将匹配八进制转义值</em>nm*。</td></tr><tr><td style="text-align:center">*nml*</td><td style="text-align:center">如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td></tr><tr><td style="text-align:center">\u<em>n</em></td><td style="text-align:center">匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td></tr></tbody></table></div><h4 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h4><div class="table-container"><table><thead><tr><th style="text-align:center">用户名</th><th>/^[a-z0-9_-]{3,16}$/</th></tr></thead><tbody><tr><td style="text-align:center">密码</td><td>/^[a-z0-9_-]{6,18}$/</td></tr><tr><td style="text-align:center">十六进制值</td><td>/^#?([a-f0-9]{6}\</td><td>[a-f0-9]{3})$/</td></tr><tr><td style="text-align:center">电子邮箱</td><td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/ /^[a-z\d]+(.[a-z\d]+)*@(<a href="-[\da-z]">\da-z</a>?)+(.{1,2}[a-z]+)+$/</td></tr><tr><td style="text-align:center">URL</td><td>/^(https?:\/\/)?([\da-z.-]+).([a-z.]{2,6})([\/\w .-]<em>)</em>\/?$/</td></tr><tr><td style="text-align:center">IP 地址</td><td>/((2[0-4]\d\</td><td>25[0-5]\</td><td>[01]?\d\d?).){3}(2[0-4]\d\</td><td>25[0-5]\</td><td>[01]?\d\d?)/ /^(?:(?:25[0-5]\</td><td>2[0-4][0-9]\</td><td>[01]?[0-9][0-9]?).){3}(?:25[0-5]\</td><td>2[0-4][0-9]\</td><td>[01]?[0-9][0-9]?)$/</td></tr><tr><td style="text-align:center">HTML 标签</td><td>/^&lt;([a-z]+)(<sup><a href="#fn_<" id="reffn_<"><</a></sup>+)<em>(?:&gt;(.</em>)&lt;\/\1&gt;\</td><td>\s+\/&gt;)$/</td></tr><tr><td style="text-align:center">删除代码\注释</td><td>(?&lt;!http:\</td><td>\S)//.*$</td></tr><tr><td style="text-align:center">Unicode编码中的汉字范围</td><td>/^[\u2E80-\u9FFF]+$/</td></tr></tbody></table></div><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><h6 id="正则表达式的构建"><a href="#正则表达式的构建" class="headerlink" title="正则表达式的构建"></a>正则表达式的构建</h6><p>regex这个库是需要std命名空间支持的，在下面我会省略std命名空间，但需要注意这点。</p><p>正则表达式的构建有两种方法，我把他们叫做直接构建和赋值构建</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接构建</span></span><br><span class="line"><span class="function">regex <span class="title">e</span><span class="params">(<span class="string">&quot;(sub)(.*)&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//赋值构建</span></span><br><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;(sub)(.*)&quot;</span>;</span><br><span class="line"><span class="function">regex <span class="title">rule</span><span class="params">(str)</span></span>;</span><br></pre></td></tr></table></figure><p>注意正则表达式一定要在构建后才可以进行字符串的匹配</p><h6 id="字符串匹配函数"><a href="#字符串匹配函数" class="headerlink" title="字符串匹配函数"></a>字符串匹配函数</h6><p>字符串匹配使用<code>regex_match()</code>函数，函数的返回值为bool，即是否匹配，函数有几种形式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> cstr[] = <span class="string">&quot;subject&quot;</span></span><br><span class="line"><span class="built_in">string</span> str (<span class="string">&quot;subject&quot;</span>);</span><br><span class="line"><span class="function">regex <span class="title">rule</span> <span class="params">(<span class="string">&quot;(sub)(.*)&quot;</span>)</span></span>;</span><br><span class="line">cmatch cm;</span><br><span class="line">smatch sm;</span><br><span class="line"><span class="comment">//以下函数原型都是自己整理，并非模板中的函数原型，仅作为方便学习使用</span></span><br><span class="line">regex_match(str,rule);   <span class="comment">//字符串和规则 返回是否匹配</span></span><br><span class="line">regex_match(str.begin(),str.end(),e); <span class="comment">//匹配某一范围字符</span></span><br><span class="line">regex_match(cstr,cm,e); <span class="comment">//cm.size()返回匹配字符长度</span></span><br><span class="line">regex_match(str,sm,e);  <span class="comment">//sm.size()返回匹配字符长度</span></span><br><span class="line"></span><br><span class="line">regex_match ( cstr, cm, e, <span class="built_in">std</span>::regex_constants::match_default );<span class="comment">//返回匹配的每个字符</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;the matches were: &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;cm.size(); ++i) &#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; cm[i] &lt;&lt; <span class="string">&quot;] &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="字符串搜索函数"><a href="#字符串搜索函数" class="headerlink" title="字符串搜索函数"></a>字符串搜索函数</h6><p>字符串搜索函数使用<code>regex_search</code>函数，函数的返回值为bool</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">std</span>::regex_search (s,m,e)) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> x:m) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  s = m.suffix().str();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="字符串替换函数"><a href="#字符串替换函数" class="headerlink" title="字符串替换函数"></a>字符串替换函数</h6><p>字符串替换使用<code>regex_rlace()</code>函数，函数返回修改后的字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regex_replace (str,rule,<span class="string">&quot;sub-$2&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> re = <span class="string">&quot;[[:graph:]]+@163[.]com&quot;</span>;</span><br><span class="line">    <span class="function">regex <span class="title">rule</span><span class="params">(re)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;acvds.cpp@163.com&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; regex_match(str, rule) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//true</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;正则表达式是一种文本模式，能够便捷高效的处理文本，赋予使用者描述和分析文本的能力。正则表达式能够添加，删除，分离，叠加、插入和修整各种类型的文本和数据。&lt;/p&gt;
&lt;p&gt;正则表达式由两种字符构成：特殊字符（元字符），以及普通文本。究其根本，正则表达式就是通过符号上的表述去匹配一个字符串的通式，处于4NF的内部。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ccf" scheme="http://yokeso.github.io/tags/ccf/"/>
    
      <category term="正则表达式" scheme="http://yokeso.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="字符串处理" scheme="http://yokeso.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ZigBee协议栈探究---（三）网络创建</title>
    <link href="http://yokeso.github.io/2021/03/15/ZigBee%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%8E%A2%E7%A9%B6---%EF%BC%88%E4%B8%89%EF%BC%89%E7%BD%91%E7%BB%9C%E5%88%9B%E5%BB%BA/"/>
    <id>http://yokeso.github.io/2021/03/15/ZigBee%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%8E%A2%E7%A9%B6---%EF%BC%88%E4%B8%89%EF%BC%89%E7%BD%91%E7%BB%9C%E5%88%9B%E5%BB%BA/</id>
    <published>2021-03-15T03:29:49.000Z</published>
    <updated>2021-03-18T15:40:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ZigBee协议栈探究—-（三）网络创建"><a href="#ZigBee协议栈探究—-（三）网络创建" class="headerlink" title="ZigBee协议栈探究—-（三）网络创建"></a>ZigBee协议栈探究—-（三）网络创建</h1><p>关于设备的链接，还需要从头说起。</p><p>在（一）中我提到过一个函数<code>osalInitTasks</code>，这个函数位于<code>OSAL_Smart_home.c</code>中。我们再把这个函数拿出来看一下：</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      osalInitTasks</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief   This function invokes the initialization function for each task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   void</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">osalInitTasks</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint8 taskID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  tasksEvents = (uint16 *)osal_mem_alloc( <span class="keyword">sizeof</span>( uint16 ) * tasksCnt); <span class="comment">//分配内存返回缓冲区指针</span></span><br><span class="line">  osal_memset( tasksEvents, <span class="number">0</span>, (<span class="keyword">sizeof</span>( uint16 ) * tasksCnt)); <span class="comment">//设置所分配内存空间单元值0</span></span><br><span class="line"></span><br><span class="line">  macTaskInit( taskID++ ); <span class="comment">//macTaskInit(0) ，用户不需考虑</span></span><br><span class="line">  nwk_init( taskID++ ); <span class="comment">//nwk_init(1)，用户不需考虑</span></span><br><span class="line">  Hal_Init( taskID++ ); <span class="comment">//Hal_Init(2) ，用户需考虑</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined( MT_TASK )</span></span><br><span class="line">  MT_TaskInit( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  APS_Init( taskID++ );  <span class="comment">//APS_Init(3) ，用户不需考虑</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ( ZIGBEE_FRAGMENTATION )</span></span><br><span class="line">  APSF_Init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  ZDApp_Init( taskID++ ); <span class="comment">//ZDApp_Init(4) ，用户需考虑</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )</span></span><br><span class="line">  ZDNwkMgr_Init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  Smart_home_Init( taskID ); <span class="comment">//用户任务初始化用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在最开始的流程分析中，我们已经分析了<code>Smart_home_Init( taskID );</code>的作用：初始化用户进程，为用户创建Task。在分析的时候也提过ZDO层，也就是<code>ZigBee Device Object</code>，这个层掌管着ZigBee设备的终端节点具体提供以下功能</p><ul><li>初始化应用支持子层，网络层。</li><li>发现节点和节点功能。在无信标的网络中，加入的节点只对其父节点可见。而其他节点可以通过ZDO的功能来确定网络的整体拓扑结构已经节点所能提供的功能。</li><li>安全加密管理：主要包括安全key的建立和发送，已经安全授权。</li><li>网络的维护功能。</li><li>绑定管理：绑定的功能由应用支持子层提供，但是绑定功能的管理却是由ZDO提供，它确定了绑定表的大小，绑定的发起和绑定的解除等功能。</li><li>节点管理：对于网络协调器和路由器，ZDO提供网络监测、获取路由和绑定信息、发起脱离网络过程等一系列节点管理功能。</li></ul><p>也就是说，我们想要探究的设备发现与绑定，ZigBee组网的过程都在ZDO层进行实现。那就进入<code>ZDApp_Init()</code>这个函数来看看吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      ZDApp_Init</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief   ZDApp Initialization function.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   task_id - ZDApp Task ID</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  None</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZDApp_Init</span><span class="params">( uint8 task_id )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 存储task ID</span></span><br><span class="line">  ZDAppTaskID = task_id;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化并存储ZDO设备短地址</span></span><br><span class="line">  ZDAppNwkAddr.addrMode = Addr16Bit;</span><br><span class="line">  ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;</span><br><span class="line">  (<span class="keyword">void</span>)NLME_GetExtAddr();  <span class="comment">// 加载saveExtAddr指针</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查手动“保持自动启动”</span></span><br><span class="line">  ZDAppCheckForHoldKey();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化ZDO项目并设置设备-要创建的设备类型。</span></span><br><span class="line">  ZDO_Init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向AF注册端点描述</span></span><br><span class="line">  <span class="comment">// 此任务没有简单描述，但我们仍然需要</span></span><br><span class="line">  <span class="comment">// 以注册端点。</span></span><br><span class="line">  afRegister( (endPointDesc_t *)&amp;ZDApp_epDesc );</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined( ZDO_USERDESC_RESPONSE )</span></span><br><span class="line">  ZDApp_InitUserDesc();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// ZDO_USERDESC_RESPONSE</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否启动设备</span></span><br><span class="line">  <span class="keyword">if</span> ( devState != DEV_HOLD )</span><br><span class="line">  &#123;</span><br><span class="line">    ZDOInitDevice( <span class="number">0</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );</span><br><span class="line">    <span class="comment">// LED闪烁来标识设备启动</span></span><br><span class="line">    HalLedBlink ( HAL_LED_4, <span class="number">0</span>, <span class="number">50</span>, <span class="number">500</span> );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化ZDO回调函数指针zdoCBFunc []</span></span><br><span class="line">  ZDApp_InitZdoCBFunc();</span><br><span class="line"></span><br><span class="line">  ZDApp_RegisterCBs();</span><br><span class="line">&#125; <span class="comment">/* ZDApp_Init() */</span></span><br></pre></td></tr></table></figure><p>在这个函数中可以看到，最重要的一步就是<code>ZDOInitDevice()</code>设备在这里开始启动，并让LED闪烁。那么我们从这里来看看设备是如何启动的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      ZDOInitDevice</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief   启动网络中的设备。该功能将读取ZCD_NV_STARTUP_OPTION（NV项目）以确定是否要</span></span><br><span class="line"><span class="comment"> *          恢复设备的网络状态。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   startDelay - 启动设备的时间延迟（以毫秒为单位）。</span></span><br><span class="line"><span class="comment"> *                       此延迟增加了抖动：((NWK_START_DELAY + startDelay)+</span></span><br><span class="line"><span class="comment"> *                       (osal_rand()&amp;EXTENDED_JOINING_RANDOM_MASK))</span></span><br><span class="line"><span class="comment"> *                       当startDelay设置为ZDO_INIT_HOLD_NWK_START时</span></span><br><span class="line"><span class="comment"> *                       此功能将保持网络初始化。应用可以启动设备。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span>    如果应用程序想要强制“新”加入，则应用程序在调用这个函数之前应设置在</span></span><br><span class="line"><span class="comment"> *          ZCD_NV_STARTUP_OPTION NV中的ZCD_STARTOPT_DEFAULT_NETWORK_STATE位。“新”加  </span></span><br><span class="line"><span class="comment"> *          入意味着不恢复网络设备状态。使用zgWriteStartupOptions（）设置这些选项。        </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - 设备的网络状态为已存储</span></span><br><span class="line"><span class="comment"> *    ZDO_INITDEV_NEW_NETWORK_STATE - 网络状态复位</span></span><br><span class="line"><span class="comment"> *          这可能表示ZCD_NV_STARTUP_OPTION 无法还原, 或者没有网络状态需要还原</span></span><br><span class="line"><span class="comment"> *    ZDO_INITDEV_LEAVE_NOT_STARTED - 重置之前，network leave将重加入选项设为真，因此，</span></span><br><span class="line"><span class="comment"> *          该设备不是在网络中启动（仅一次）。下次这个函数调用它将启动。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">uint8 <span class="title">ZDOInitDevice</span><span class="params">( uint16 startDelay )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;</span><br><span class="line">  uint16 extendedDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( devState == DEV_HOLD )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 如果已更新NV项目，则初始化RAM项目表</span></span><br><span class="line">    zgInitItems( FALSE );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ZDConfig_InitDescriptors();</span><br><span class="line">  <span class="comment">//devtag.071807.todo - fix this temporary solution</span></span><br><span class="line">  _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ( NV_RESTORE )</span></span><br><span class="line">  <span class="comment">// 直接获取键盘以查看是否需要重置nv。</span></span><br><span class="line">  <span class="comment">// 按住SW_BYPASS_NV键（在OnBoard.h中定义）</span></span><br><span class="line">  <span class="comment">// 在引导时跳过过去的NV 复位。</span></span><br><span class="line">  <span class="keyword">if</span> ( HalKeyRead() == SW_BYPASS_NV )</span><br><span class="line">    networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 确定是否应恢复NV</span></span><br><span class="line">    networkStateNV = ZDApp_ReadNetworkRestoreState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )</span><br><span class="line">  &#123;</span><br><span class="line">    networkStateNV = ZDApp_RestoreNetworkState();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 清除NV中的网络状态</span></span><br><span class="line">    NLME_InitNV();</span><br><span class="line">    NLME_SetDefaultNV();</span><br><span class="line">    <span class="comment">// 清除NWK键值</span></span><br><span class="line">    ZDSecMgrClearNVKeyValues();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )</span><br><span class="line">  &#123;</span><br><span class="line">    ZDAppDetermineDeviceType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅在加入网络时延迟-无法恢复网络状态</span></span><br><span class="line">    extendedDelay = (uint16)((NWK_START_DELAY + startDelay)</span><br><span class="line">              + (osal_rand() &amp; EXTENDED_JOINING_RANDOM_MASK));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化设备类型的安全性e</span></span><br><span class="line">  ZDApp_SecInit( networkStateNV );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( ZDO_INIT_HOLD_NWK_START != startDelay )</span><br><span class="line">  &#123;</span><br><span class="line">    devState = DEV_INIT;    <span class="comment">// 删除保持状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化请假控制逻辑</span></span><br><span class="line">    ZDApp_LeaveCtrlInit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查请假控制重置设置</span></span><br><span class="line">    ZDApp_LeaveCtrlStartup( &amp;devState, &amp;startDelay );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 离开可能为持有态</span></span><br><span class="line">    <span class="keyword">if</span> ( devState == DEV_HOLD )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 设置NV启动选项以强制执行“新”连接。</span></span><br><span class="line">      zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通知申请</span></span><br><span class="line">      osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> ( ZDO_INITDEV_LEAVE_NOT_STARTED );   <span class="comment">// Don&#x27;t join - (one time).</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发网络启动</span></span><br><span class="line">    ZDApp_NetworkInit( extendedDelay );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置广播地址掩码以支持广播过滤</span></span><br><span class="line">  NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ( networkStateNV );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过阅读可以看到，这个函数的主要目的就是计算启动延迟，并启动网络设备，主要启动设备的语句为<code>ZDApp_NetworkInit( extendedDelay );</code>那我们就来看看这个函数又做了什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      ZDApp_NetworkInit()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief   用来启动网络加入程序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   delay - 启动前需等待的毫秒数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZDApp_NetworkInit</span><span class="params">( uint16 delay )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( delay )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 启动设备前稍等片刻</span></span><br><span class="line">    osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这两个函数名称和形参来看，都是要将<code>ZDAppTaskID</code>的标识设置为<code>ZDO_NETWORK_INIT</code>。而被设置了flag的任务在这个时候就会被处理。接收这个处理的函数就是<code>ZDApp_event_loop()</code>，由于这个函数过长，所以只看与<code>ZDO_NETWORK_INIT</code>处理相关的部分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( events &amp; ZDO_NETWORK_INIT )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 初始化APP并启动网络</span></span><br><span class="line">  devState = DEV_INIT;</span><br><span class="line">  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );</span><br><span class="line"></span><br><span class="line">  ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,</span><br><span class="line">                   DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回未启动事件c</span></span><br><span class="line">  <span class="keyword">return</span> (events ^ ZDO_NETWORK_INIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里又调用了ZDO_StartDevice()函数，其中</p><p>ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR</p><p>devStartMode = MODE_HARD</p><p>且协调器编译了ZDO_COORDINATOR</p><p>也就是说，在这里就要分为协调器的开始组建网络，路由器的辅助转发网络消息，以及终端节点的加入网络进行区别，对于我们现在来说，主要的部分就来看协调器的组建网络：</p><p>我们把这一部分建网的代码拿来看一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//This function starts a device in a network.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZDO_StartDevice</span><span class="params">( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ......</span><br><span class="line">   <span class="keyword">if</span> ( ZG_BUILD_COORDINATOR_TYPE &amp;&amp; logicalType == NODETYPE_COORDINATOR )</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> ( startMode == MODE_HARD )</span><br><span class="line">     &#123;</span><br><span class="line">       devState = DEV_COORD_STARTING;</span><br><span class="line">       ret = NLME_NetworkFormationRequest( zgConfigPANID, </span><br><span class="line">                                           zgApsUseExtendedPANID, </span><br><span class="line">                                           zgDefaultChannelList,</span><br><span class="line">                                           zgDefaultStartingScanDuration, </span><br><span class="line">                                           beaconOrder,</span><br><span class="line">                                           superframeOrder, </span><br><span class="line">                                           <span class="literal">false</span> );</span><br><span class="line">     &#125;</span><br><span class="line">     ......</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>也就是说，组建网络的重要一环原来是在<code>NLME_NetworkFormationRequest()</code>这个函数中，很遗憾，这部分函数并不开源，但从网络查询中得知，这个函数是用来判断网络状态的，主要要分为两种状态</p><ul><li>nwkStatus为ZSuccess时，也就是网络创建成功了，将设备状态<code>decSAtatue</code>设置为对应的<code>DEV_ZB_COORD</code>,然后设置事件<code>ZDO_STATE_CHANGE_EVENT</code>也就是网络状态发生转变的事件，返回到<code>ZD_App_event_loop()</code>中继续执行</li><li>nwkStatus为非ZSuccess时，也就是网络创建不成功，那么就将增大功率返回到<code>ZD_App_event_loop()</code>中加大功率，如果功率已经是最大了，那么就将<code>devState</code>设置为<code>DEV_INIT</code>（创建网络失败）再设置事件<code>ZDO_STATE_CHANGE_EVENT</code>，返回到<code>ZD_App_event_loop()</code></li></ul><p>所以，无论如何，返回值都是在上面提到的语句中执行，也就是这一条</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );</span><br></pre></td></tr></table></figure><p>那再回过来看<code>ZD_App_event_loop()</code>是怎么处理这个状态的呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( events &amp; ZDO_STATE_CHANGE_EVT )</span><br><span class="line">&#123;</span><br><span class="line">  ZDO_UpdateNwkStatus( devState );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动时，如果设备是集中器，则执行一次MTO路由发现</span></span><br><span class="line">  <span class="keyword">if</span> ( zgConcentratorEnable == TRUE )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Start next event</span></span><br><span class="line">    osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, <span class="number">100</span> );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>调用了<code>ZDO_UpdateNwkStatus( devState )</code>,网络状态改变,这个函数会更新和发送信息通知每个注册登记过的应用终端.我们再接着来看这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZDO_UpdateNwkStatus</span><span class="params">( devStates_t state )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// Endpoint/Interface descriptor list.</span></span><br><span class="line">  epList_t *epDesc = epList;</span><br><span class="line">  byte bufLen = <span class="keyword">sizeof</span>(<span class="keyword">osal_event_hdr_t</span>);</span><br><span class="line">  <span class="keyword">osal_event_hdr_t</span> *msgPtr;</span><br><span class="line"></span><br><span class="line"> ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();</span><br><span class="line"> (<span class="keyword">void</span>)NLME_GetExtAddr();  <span class="comment">// Load the saveExtAddr pointer.</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span> ( epDesc )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( epDesc-&gt;epDesc-&gt;endPoint != ZDO_EP )</span><br><span class="line">    &#123;</span><br><span class="line">     msgPtr = (<span class="keyword">osal_event_hdr_t</span> *)osal_msg_allocate( bufLen );</span><br><span class="line">     <span class="keyword">if</span> ( msgPtr )</span><br><span class="line">     &#123;</span><br><span class="line">       msgPtr-&gt;event = ZDO_STATE_CHANGE; <span class="comment">// Command ID</span></span><br><span class="line">       msgPtr-&gt;status = (byte)state;</span><br><span class="line"></span><br><span class="line">       osal_msg_send( *(epDesc-&gt;epDesc-&gt;task_id), (byte *)msgPtr ); <span class="comment">//发往应用任务</span></span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    epDesc = epDesc-&gt;nextDesc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对SampleApp的协调器来说，这里触发应用任务SampleApp_TaskID的ZDO_STATE_CHANGE事件,看下对ZDO_STATE_CHANGE的处理:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Ccase ZDO_STATE_CHANGE:   </span><br><span class="line">SampleApp_NwkState = (devStates_t)(MSGpkt-&gt;hdr.status); <span class="comment">//获取设备当前状态</span></span><br><span class="line"><span class="keyword">if</span> ( (SampleApp_NwkState == DEV_ZB_COORD)</span><br><span class="line">    || (SampleApp_NwkState == DEV_ROUTER)</span><br><span class="line">    || (SampleApp_NwkState == DEV_END_DEVICE) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Start sending the periodic message in a regular interval.</span></span><br><span class="line">  osal_start_timerEx( SampleApp_TaskID,</span><br><span class="line">                    SAMPLEAPP_SEND_PERIODIC_MSG_EVT,</span><br><span class="line">                    SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Device is no longer in the network</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>可以看到当协调器建立网络成功,通过回调函数触发应用任务的ZDO_STATE_CHANGE事件,最终开启定时器发送周期信息.</p><p>路由器也可以按这个思路进行分析。</p><p>最后来给一下大致的流程</p><p>main()  -&gt;  osal_init_system()  -&gt;  osalInitTasks()  -&gt;  ZDApp_Init()  -&gt;  ZDOInitDevice()  -&gt;  ZDApp_NetworkInit  -&gt;  触发ZDAppTaskID的ZDO_NETWORK_INIT       -&gt;  ZDO_StartDevice()-&gt; NLME_NetworkFormationRequest()  -&gt;  网络建立成功ZDO_NetworkFormationConfirmCB    -&gt;                           触发ZDAppTaskID的ZDO_NETWORK_START  -&gt;  ZDApp_NetworkStartEvt()-&gt;触发ZDAppTaskID的ZDO_STATE_CHANGE_EVT-&gt;ZDO_UpdateNwkStatus()  -&gt;  触发SampleApp_TaskID的ZDO_STATE_CHANGE   -&gt;开户周期信息发送的定时器.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ZigBee协议栈探究—-（三）网络创建&quot;&gt;&lt;a href=&quot;#ZigBee协议栈探究—-（三）网络创建&quot; class=&quot;headerlink&quot; title=&quot;ZigBee协议栈探究—-（三）网络创建&quot;&gt;&lt;/a&gt;ZigBee协议栈探究—-（三）网络创建&lt;/h1&gt;&lt;p&gt;关于设备的链接，还需要从头说起。&lt;/p&gt;
&lt;p&gt;在（一）中我提到过一个函数&lt;code&gt;osalInitTasks&lt;/code&gt;，这个函数位于&lt;code&gt;OSAL_Smart_home.c&lt;/code&gt;中。我们再把这个函数拿出来看一下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ZigBee" scheme="http://yokeso.github.io/tags/ZigBee/"/>
    
      <category term="CC2530" scheme="http://yokeso.github.io/tags/CC2530/"/>
    
      <category term="协议栈" scheme="http://yokeso.github.io/tags/%E5%8D%8F%E8%AE%AE%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>ZigBee协议栈探究---（二）数据的接收与发送</title>
    <link href="http://yokeso.github.io/2021/03/12/ZigBee%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%8E%A2%E7%A9%B6---%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8E%A5%E6%94%B6%E4%B8%8E%E5%8F%91%E9%80%81/"/>
    <id>http://yokeso.github.io/2021/03/12/ZigBee%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%8E%A2%E7%A9%B6---%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8E%A5%E6%94%B6%E4%B8%8E%E5%8F%91%E9%80%81/</id>
    <published>2021-03-12T02:03:41.000Z</published>
    <updated>2021-03-18T15:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ZigBee协议栈探究—-（二）数据的接收与发送"><a href="#ZigBee协议栈探究—-（二）数据的接收与发送" class="headerlink" title="ZigBee协议栈探究—-（二）数据的接收与发送"></a>ZigBee协议栈探究—-（二）数据的接收与发送</h1><h2 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1.回顾"></a>1.回顾</h2><p>上一章讲解了ZigBee协议栈中函数的运行走向，了解了ZigBee的任务最终在<code>ProgressEvent</code>这个函数中执行，那么在协议栈中这个函数在不改动的情况下究竟执行了什么？我们又应该如何改动它呢？我们又如何进行数据的发送与接收呢？</p><span id="more"></span><h2 id="2-从ProcessEvent函数开始讨论数据接收处理"><a href="#2-从ProcessEvent函数开始讨论数据接收处理" class="headerlink" title="2.从ProcessEvent函数开始讨论数据接收处理"></a>2.从ProcessEvent函数开始讨论数据接收处理</h2><p>首先来看看<code>Smart_home_ProcessEvent()</code>函数究竟做了什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      Smart_home_ProcessEvent</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief   Generic Application Task event processor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   task_id  - The OSAL assigned task ID.</span></span><br><span class="line"><span class="comment"> * @param   events   - Bit map of events to process.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  Event flags of all unprocessed events.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">UINT16 <span class="title">Smart_home_ProcessEvent</span><span class="params">( uint8 task_id, UINT16 events )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  (<span class="keyword">void</span>)task_id;  <span class="comment">// Intentionally unreferenced parameter</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ( events &amp; SYS_EVENT_MSG )</span><br><span class="line">  &#123;</span><br><span class="line">    afIncomingMSGPacket_t *MSGpkt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Smart_home_TaskID )) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( MSGpkt-&gt;hdr.event )</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">case</span> ZDO_CB_MSG:</span><br><span class="line">        Smart_home_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">          </span><br><span class="line">      <span class="keyword">case</span> KEY_CHANGE:</span><br><span class="line">        Smart_home_HandleKeys( ((keyChange_t *)MSGpkt)-&gt;state, ((keyChange_t *)MSGpkt)-&gt;keys );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> AF_INCOMING_MSG_CMD:</span><br><span class="line">        Smart_home_ProcessMSGCmd( MSGpkt );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      osal_msg_deallocate( (uint8 *)MSGpkt );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ( events ^ SYS_EVENT_MSG );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( events &amp; Smart_home_SEND_EVT )</span><br><span class="line">  &#123;</span><br><span class="line">    Smart_home_Send();</span><br><span class="line">    <span class="keyword">return</span> ( events ^ Smart_home_SEND_EVT );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( events &amp; Smart_home_RESP_EVT )</span><br><span class="line">  &#123;</span><br><span class="line">    Smart_home_Resp();</span><br><span class="line">    <span class="keyword">return</span> ( events ^ Smart_home_RESP_EVT );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ( <span class="number">0</span> );  <span class="comment">// Discard unknown events.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个函数中最引人瞩目的应该就是<code>MSGpkt</code>以及一大堆的宏调用了。让我们来逐一分析一下。首先就是<code>MSGpkt</code>，很明显这个函数的类型是<code>afIncomingMSGPacket_t</code>的指针，我们来看一下这个结构体的构造</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">osal_event_hdr_t</span> hdr;     <span class="comment">/* OSAL信息头部 */</span></span><br><span class="line">  uint16 groupId;           <span class="comment">/*组号，未设置时默认为0 */</span></span><br><span class="line">  uint16 clusterId;         <span class="comment">/* 信息簇号 */</span></span><br><span class="line">  afAddrType_t srcAddr;     <span class="comment">/* 源地址，如果端点号为STUBAPS_INTER_PAN_EP,</span></span><br><span class="line"><span class="comment">                               就是InterPAN 信息 */</span></span><br><span class="line">  uint16 macDestAddr;       <span class="comment">/* MAC头 目的短地址 */</span></span><br><span class="line">  uint8 endPoint;           <span class="comment">/* 目的端点号 */</span></span><br><span class="line">  uint8 wasBroadcast;       <span class="comment">/* 如果是广播则为真 */</span></span><br><span class="line">  uint8 LinkQuality;        <span class="comment">/* 收到数据帧的链接质量 */</span></span><br><span class="line">  uint8 correlation;        <span class="comment">/* 接收到的数据帧的原始相关值 */</span></span><br><span class="line">  int8  rssi;               <span class="comment">/* 接收的射频功率，单位dBm */</span></span><br><span class="line">  uint8 SecurityUse;        <span class="comment">/* 不推荐使用 */</span></span><br><span class="line">  uint32 timestamp;         <span class="comment">/*  MAC收据时间戳 */</span></span><br><span class="line">  uint8 nwkSeqNum;          <span class="comment">/* 网络报头帧序列号 */</span></span><br><span class="line">  afMSGCommandFormat_t cmd; <span class="comment">/* 应用层数据 */</span></span><br><span class="line">&#125; afIncomingMSGPacket_t;</span><br></pre></td></tr></table></figure><p>通过阅读注释，很明显能明白这是数据帧报文段的定义。也就是说<code>MSGpkt</code>是一个初始化的报文段指针。那么这个报文段是由谁给出来的呢？再来看下面这一句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Smart_home_TaskID )) </span><br></pre></td></tr></table></figure><p>对于<code>osal_msg_receive( Smart_home_TaskID )</code>这一部分，这里很容易从函数名看出指的是接收到的数据。这里暂且不深入探究，我更好奇的是：在while中按case进行划分时，这些case都是什么？又都可以设置为什么呢？我们随便挑几个来看一看。</p><p>可以看出，指引case的条件是<code>MSGpkt-&gt;hdr.event</code>，在上面可以找到，hdr的类型是<code>osal_event_hdr_t</code>,这个数据结构定义是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  uint8  event;</span><br><span class="line">  uint8  status;</span><br><span class="line">&#125; <span class="keyword">osal_event_hdr_t</span>;</span><br></pre></td></tr></table></figure><p>也就是说，这个结构体中只有uint8 的event和status两个。再回头来看这些case。通过观察我们发现，这几个case并不处于同一个.h文件，而是分散到几个.h文件中。但都具有一个比较共同的标识 ：<code>Global Generic System Message</code>，在下面我尽我所能的整理了一下可能出现的case，以供参考</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*comdef.h*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_CHANGE                0xC0    <span class="comment">// 按键事件</span></span></span><br><span class="line"><span class="comment">/*ZComDef.h*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_INCOMING_ZTOOL_PORT   0x21    <span class="comment">// 来自ZTool端口的原始数据（未实现）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPI_INCOMING_ZAPP_DATA    0x22    <span class="comment">// 来自ZAPP端口的原始数据（参见serialApp.c）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT_SYS_APP_MSG            0x23    <span class="comment">// 来自MT Sys消息的原始数据</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT_SYS_APP_RSP_MSG        0x24    <span class="comment">// MT Sys消息的原始数据输出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT_SYS_OTA_MSG            0x25    <span class="comment">// MT OTA Rsp的原始数据输出</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_DATA_CONFIRM_CMD       0xFD    <span class="comment">// 数据确认</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_INCOMING_MSG_CMD       0x1A    <span class="comment">// 收到的MSG类型消息</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_INCOMING_KVP_CMD       0x1B    <span class="comment">// 传入的KVP类型消息</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AF_INCOMING_GRP_KVP_CMD   0x1C    <span class="comment">// 传入组KVP类型消息</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//＃define KEY_CHANGE 0xC0 //按键事件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZDO_NEW_DSTADDR           0xD0    <span class="comment">// ZDO收到了此应用的新DstAddr</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZDO_STATE_CHANGE          0xD1    <span class="comment">// ZDO更改了设备的网络状态</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZDO_MATCH_DESC_RSP_SENT   0xD2    <span class="comment">// 已发送ZDO匹配描述符响应</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZDO_CB_MSG                0xD3    <span class="comment">// ZDO传入消息回调</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZDO_NETWORK_REPORT        0xD4    <span class="comment">// ZDO收到网络报告消息</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZDO_NETWORK_UPDATE        0xD5    <span class="comment">// ZDO收到网络更新消息</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZDO_ADDR_CHANGE_IND       0xD6    <span class="comment">// ZDO被告知设备地址更改</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NM_CHANNEL_INTERFERE      0x31    <span class="comment">// NwkMgr收到频道干扰消息</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NM_ED_SCAN_CONFIRM        0x32    <span class="comment">// NwkMgr收到ED扫描确认消息</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SAPS_CHANNEL_CHANGE       0x33    <span class="comment">// 存根APS更改了设备的通道</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZCL_INCOMING_MSG          0x34    <span class="comment">// 传入的ZCL基础消息</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZCL_KEY_ESTABLISH_IND     0x35    <span class="comment">// ZCL密钥建立完成指示</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZCL_OTA_CALLBACK_IND      0x36    <span class="comment">// ZCL OTA完成指示</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为应用程序（用户应用程序）保留的OSAL系统消息ID /事件</span></span><br><span class="line"><span class="comment">// 0xE0 ?0xFC</span></span><br></pre></td></tr></table></figure><p> 在了解了case都可以用什么表示之后，我们再来看看对应情况的应对函数。在示例中总共涉及了三个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> ZDO_CB_MSG:</span><br><span class="line">  Smart_home_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">case</span> KEY_CHANGE:</span><br><span class="line">  Smart_home_HandleKeys( ((keyChange_t *)MSGpkt)-&gt;state, ((keyChange_t *)MSGpkt)-&gt;keys );</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> AF_INCOMING_MSG_CMD:</span><br><span class="line">  Smart_home_ProcessMSGCmd( MSGpkt );</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>这几个函数都是在<code>Smart_home.c</code>中定义的，都是对应情况下的希望对应解决方法，其中<code>Smart_home_HandleKeys</code>是需要用户自行实现填充的按键函数。</p><p>那么现在我们已经通过代码得知，我们所有的任务只要通过switch语句来处理网络包传输中表示事件的各种event，就可以成功的利用自写函数来控制设备进行反应。也就是说，我们已经掌握了数据接收处理的方法，那么就产生了一个更有趣的话题：数据的发送究竟是怎么完成的呢？又是通过什么样的代码来实现的呢？</p><h2 id="3-数据的发送"><a href="#3-数据的发送" class="headerlink" title="3.数据的发送"></a>3.数据的发送</h2><p>可以肯定的是，数据的发送也是ZigBee提供好的，只需我们直接调用就好。那这个函数在哪里呢？</p><p>经过查找，我在AF.c中找到了这个函数，下面就来看看这个名为<code>afStatus_t AF_DataRequest</code>的函数</p><p>这个函数比较长，所以从函数形参开始一点一点看，我会直接将函数说明标识在形参中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">uint8 AF_DataRequestDiscoverRoute = TRUE;</span><br><span class="line"><span class="comment">/* 函数功能，信息发送和多路传输*/</span></span><br><span class="line"><span class="function">afStatus_t <span class="title">AF_DataRequest</span><span class="params">( afAddrType_t *dstAddr,   <span class="comment">//完整的ZB目标地址：Nwk地址+端点</span></span></span></span><br><span class="line"><span class="function"><span class="params">                           endPointDesc_t *srcEP,   <span class="comment">//起点描述（响应或确认）</span></span></span></span><br><span class="line"><span class="function"><span class="params">                           uint16 cID,              <span class="comment">//由配置文件指定的有效集群ID。</span></span></span></span><br><span class="line"><span class="function"><span class="params">                           uint16 len,              <span class="comment">//数据字节数</span></span></span></span><br><span class="line"><span class="function"><span class="params">                           uint8 *buf,              <span class="comment">//指向要发送的数据字节的指针。</span></span></span></span><br><span class="line"><span class="function"><span class="params">                           uint8 *transID,          <span class="comment">/*指向可以修改的字节的指针，</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">                                                    该字节将用作msg的事务序列号。*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">                           uint8 options,           <span class="comment">//Tx选项的有效位掩码</span></span></span></span><br><span class="line"><span class="function"><span class="params">                           uint8 radius )</span>           <span class="comment">//通常设置为AF_DEFAULT_RADIUS。</span></span></span><br><span class="line"><span class="function"><span class="comment">/*结果及返回值</span></span></span><br><span class="line"><span class="function"><span class="comment">*如果成功transID 增加1</span></span></span><br><span class="line"><span class="function"><span class="comment">*返回 afStatus_t</span></span></span><br><span class="line"><span class="function"><span class="comment">  #define afStatus_SUCCESS            ZSuccess           // 0x00 </span></span></span><br><span class="line"><span class="function"><span class="comment">  #define afStatus_FAILED             ZFailure           // 0x01 </span></span></span><br><span class="line"><span class="function"><span class="comment">  #define afStatus_INVALID_PARAMETER  ZInvalidParameter  // 0x02 </span></span></span><br><span class="line"><span class="function"><span class="comment">  #define afStatus_MEM_FAIL           ZMemError          // 0x10 </span></span></span><br><span class="line"><span class="function"><span class="comment">  #define afStatus_NO_ROUTE           ZNwkNoRoute        // 0xCD </span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br></pre></td></tr></table></figure><p>这个函数看起来很像计算机网络中的网络层发送函数，在这里我们比较关心的是两个数据类型：<code>afAddrType_t</code>以及<code>endPointDesc_t</code>。这两个代表的是目的地址与源地址，下面就来看看这两个地址都是什么样的数据结构。先来看<code>afAddrType_t</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*afAddrType_t *dstAddr,  目的地址*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    uint16      shortAddr;</span><br><span class="line">    ZLongAddr_t extAddr;</span><br><span class="line">  &#125; addr;</span><br><span class="line">  afAddrMode_t addrMode;                 <span class="comment">//单播组播和广播选择</span></span><br><span class="line">  uint8 endPoint;                        <span class="comment">//目的端点</span></span><br><span class="line">  uint16 panId;                          <span class="comment">// used for the INTER_PAN feature</span></span><br><span class="line">&#125; afAddrType_t;</span><br></pre></td></tr></table></figure><p> 在这里，<code>addrMode</code>是模式选择选项，是一个枚举，定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">  afAddrNotPresent = AddrNotPresent,      <span class="comment">// 按照绑定表进行绑定传输</span></span><br><span class="line"></span><br><span class="line">  afAddr16Bit = Addr16Bit,                <span class="comment">// 指定目标网络地址进行单薄传输 16位</span></span><br><span class="line"></span><br><span class="line">  afAddrGroup = AddrGroup,                <span class="comment">// 组播传输</span></span><br><span class="line"></span><br><span class="line">  afAddrBroadcast = AddrBroadcast         <span class="comment">// 广播传输</span></span><br><span class="line"></span><br><span class="line">&#125; afAddrMode_t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  AddrNotPresent = <span class="number">0</span>,</span><br><span class="line">  AddrGroup = <span class="number">1</span>,</span><br><span class="line">  Addr16Bit = <span class="number">2</span>,</span><br><span class="line">  Addr64Bit = <span class="number">3</span>,                          <span class="comment">// 指定IEEE地址进行单播传输 64位</span></span><br><span class="line"></span><br><span class="line">  AddrBroadcast = <span class="number">15</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>afAddrMode_t</code>中要特殊注意一下Addr16Bit这个变量，16Bit指的是16位的网络地址，ZigBee还有一个64位的MAC地址，由IEEE进行分配和维护。</p><p>16位的网络地址是设备加入网络后由协调器或者路由器分配的，可以在Tool目录下的<code>f8wConfig.cfg</code>中更改</p><p>然后再来看<code>endPointDesc_t</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*endPointDesc_t *srcEP,  源地址方*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  uint8 endPoint;                          <span class="comment">// 端点号</span></span><br><span class="line">  uint8 *task_id;                          <span class="comment">// 指向应用程序任务ID的位置的指针。</span></span><br><span class="line">  SimpleDescriptionFormat_t *simpleDesc;   <span class="comment">// 设备的简单描述</span></span><br><span class="line">  afNetworkLatencyReq_t latencyReq;        <span class="comment">// 枚举结构 必须用 noLatencyReqs 填充</span></span><br><span class="line">&#125; endPointDesc_t;</span><br></pre></td></tr></table></figure><p>其中的<code>SimpleDescriptionFormat_t</code>、<code>afNetworkLatencyReq_t</code>定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  byte EndPoint;                          <span class="comment">// EP ID (EP=End Point)</span></span><br><span class="line">  uint16 AppProfId;                       <span class="comment">// profile ID（剖面ID）</span></span><br><span class="line">  uint16 AppDeviceId;                     <span class="comment">// Device ID</span></span><br><span class="line">  byte AppDevVer:<span class="number">4</span>;                       <span class="comment">// Device Version 0x00 为 Version 1.0</span></span><br><span class="line">  byte Reserved:<span class="number">4</span>;                        <span class="comment">// AF_V1_SUPPORT uses for AppFlags:4.</span></span><br><span class="line">  byte AppNumInClusters;                  <span class="comment">// 终端支持的输入簇的个数</span></span><br><span class="line">  cId_t *pAppInClusterList;               <span class="comment">// 指向输入Cluster ID列表的指针</span></span><br><span class="line">  byte AppNumOutClusters;                 <span class="comment">// 输出簇的个数</span></span><br><span class="line">  cId_t *pAppOutClusterList;              <span class="comment">// 指向输出Cluseter ID列表的指针</span></span><br><span class="line">&#125; SimpleDescriptionFormat_t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  noLatencyReqs,</span><br><span class="line">  fastBeacons,</span><br><span class="line">  slowBeacons</span><br><span class="line">&#125; afNetworkLatencyReq_t;</span><br></pre></td></tr></table></figure><p>从这里可以看出来，只要设置好这几个参数之后就可以直接进行数据发送了。，具体的程序可以参见</p><p><code>GenericApp_SendTheMessage</code>，<code>GenericApp_Init</code></p><p>也就是说，通过简单的设置，我们就明白了数据收发的操作。但数据发送时又是如何绑定的呢？这个绑定又是如何实现的呢？请听下回分解</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ZigBee协议栈探究—-（二）数据的接收与发送&quot;&gt;&lt;a href=&quot;#ZigBee协议栈探究—-（二）数据的接收与发送&quot; class=&quot;headerlink&quot; title=&quot;ZigBee协议栈探究—-（二）数据的接收与发送&quot;&gt;&lt;/a&gt;ZigBee协议栈探究—-（二）数据的接收与发送&lt;/h1&gt;&lt;h2 id=&quot;1-回顾&quot;&gt;&lt;a href=&quot;#1-回顾&quot; class=&quot;headerlink&quot; title=&quot;1.回顾&quot;&gt;&lt;/a&gt;1.回顾&lt;/h2&gt;&lt;p&gt;上一章讲解了ZigBee协议栈中函数的运行走向，了解了ZigBee的任务最终在&lt;code&gt;ProgressEvent&lt;/code&gt;这个函数中执行，那么在协议栈中这个函数在不改动的情况下究竟执行了什么？我们又应该如何改动它呢？我们又如何进行数据的发送与接收呢？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ZigBee" scheme="http://yokeso.github.io/tags/ZigBee/"/>
    
      <category term="CC2530" scheme="http://yokeso.github.io/tags/CC2530/"/>
    
      <category term="协议栈" scheme="http://yokeso.github.io/tags/%E5%8D%8F%E8%AE%AE%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>ZigBee协议栈探究---（一）OSAL</title>
    <link href="http://yokeso.github.io/2021/03/10/ZigBee%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%8E%A2%E7%A9%B6---%EF%BC%88%E4%B8%80%EF%BC%89OSAL/"/>
    <id>http://yokeso.github.io/2021/03/10/ZigBee%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%8E%A2%E7%A9%B6---%EF%BC%88%E4%B8%80%EF%BC%89OSAL/</id>
    <published>2021-03-10T03:45:14.000Z</published>
    <updated>2021-03-18T15:40:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ZigBee协议栈探究—-（一）OSAL"><a href="#ZigBee协议栈探究—-（一）OSAL" class="headerlink" title="ZigBee协议栈探究—-（一）OSAL"></a>ZigBee协议栈探究—-（一）OSAL</h1><h2 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1.写在前面"></a>1.写在前面</h2><p>由于是毕设的要求，我开始再一次学习ZigBee协议栈。伴随着学的东西越来越多，代码结构也忘得越来越快。所以想把自己学的知识整理到几篇博客中，以方便自己随时翻看。我的记录主要是我学习时的思考历程，所以有些地方可能看着很乱。希望看这篇文章的人谅解。如果我学到的知识能帮助后人入门有些许帮助，对我来讲即是莫大的鼓励。</p><span id="more"></span><p>我的Zstack协议栈采用的是2.51a而不是最新的3.02版本。内核使用的是CC2530。这个内核是8051架构的，所以代码方面写起来和8051很像。</p><p>在硬件上我的目标是希望创建一套自己的终端传感器，所以有关于针脚的设置我会突出说明，并且也会另开坑记录自己设计PCB板子的心得。在记录的过程中我也会尽量的去挖掘一些内核以及操作系统的知识，</p><p>关于IAR的安装使用和工具的使用我不会详述，在网上有很多文档可以参考。</p><p>谢谢大家！现在正式开坑！</p><h2 id="2-文档结构"><a href="#2-文档结构" class="headerlink" title="2.文档结构"></a>2.文档结构</h2><p>第一次安装ZigBee协议栈，一般最大的问题就是文档结构。这里我想通过项目结构树的方式写出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Zstack-CC2530-<span class="number">2.5</span><span class="number">.1</span>a</span><br><span class="line">|-Components <span class="comment">#协议栈结构,包含协议栈的基本代码</span></span><br><span class="line">| |-hal  <span class="comment">#硬件层代码</span></span><br><span class="line">| |-mac  <span class="comment">#Mac层代码</span></span><br><span class="line">| |-mt   <span class="comment">#各层交互，通过串口联通</span></span><br><span class="line">| |-osal <span class="comment">#协议栈操作系统代码</span></span><br><span class="line">| |-services <span class="comment">#地址处理函数目录</span></span><br><span class="line">| |-stack <span class="comment">#</span></span><br><span class="line">| └-zmac  <span class="comment">#ZigBee Mac层参数配置和Lib库回调</span></span><br><span class="line">|-Documents  <span class="comment">#官方帮助文档，不详述结构</span></span><br><span class="line">|-ProJects   <span class="comment">#官方示例项目</span></span><br><span class="line">| └-zstack   <span class="comment">#代码都在下面这里</span></span><br><span class="line">|   |-HomeAutomation</span><br><span class="line">|   |-Libraries</span><br><span class="line">|   |-OTA</span><br><span class="line">|   |-Samples</span><br><span class="line">|   |-SE</span><br><span class="line">|   |-Tools</span><br><span class="line">|   |-Utilities</span><br><span class="line">|   |-ZBA</span><br><span class="line">|   |-ZMain <span class="comment">#Main函数所在位置</span></span><br><span class="line">|   └-ZNP</span><br><span class="line">|-Tools      <span class="comment">#官方调试工具集合</span></span><br><span class="line">| |-OTA</span><br><span class="line">| |-SBL Tool</span><br><span class="line">| |-Z-Concerter</span><br><span class="line">| |-ZOAD</span><br><span class="line">| └-Z-Tool</span><br><span class="line">|-Getting Started Guide-CC2530.pdf <span class="comment">#官方开始文档，很易懂</span></span><br></pre></td></tr></table></figure><p>想建立自己项目的话，可以查阅文档中的Create New Application For CC2530DB来查看。根据官方文档，需要串口数据的话就用SerialApp Project <code>...\Projects\zstack\Utilities.</code>,一切都从新开始的话可以用GenericApp project <code>...\Projects\zstack\Samples.</code></p><p>这里我使用SerialApp开始学习，并按照官方文档重命名为SmartHome。自此开始协议栈代码。后面的代码我也会用Smart_Home进行解说，这个函数对应的是自己设置的函数的名字</p><h2 id="3-从Main开始"><a href="#3-从Main开始" class="headerlink" title="3.从Main开始"></a>3.从Main开始</h2><p>面对工程文件中的庞大代码，最重要的自然是先去找Main函数。ZigBee的Main函数在<code>ZMain</code>下的<code>ZMain.c</code>中，可以看到Main是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      main</span></span><br><span class="line"><span class="comment"> * @brief   First function called after startup.</span></span><br><span class="line"><span class="comment"> * @return  don&#x27;t care</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//关闭所有中断</span></span><br><span class="line">  osal_int_disable( INTS_ALL );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化板子相关硬件（LED等）</span></span><br><span class="line">  HAL_BOARD_INIT();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查电源电压以确保运行</span></span><br><span class="line">  zmain_vdd_check();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化板载 I/O</span></span><br><span class="line">  InitBoard( OB_COLD );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化Hal层驱动</span></span><br><span class="line">  HalDriverInit();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化NV系统</span></span><br><span class="line">  osal_nv_init( <span class="literal">NULL</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化Mac层</span></span><br><span class="line">  ZMacInit();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//确定扩展地址</span></span><br><span class="line">  zmain_ext_addr();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ZCL_KEY_ESTABLISH</span></span><br><span class="line">  <span class="comment">//初始化Certicom证书信息</span></span><br><span class="line">  zmain_cert_init();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化基础NV事务</span></span><br><span class="line">  zgInit();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NONWK</span></span><br><span class="line">  <span class="comment">// Since the AF isn&#x27;t a task, call it&#x27;s initialization routine</span></span><br><span class="line">  afInit();<span class="comment">//初始化AF例程</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化操作系统</span></span><br><span class="line">  osal_init_system();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//允许中断</span></span><br><span class="line">  osal_int_enable( INTS_ALL );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Final board initialization</span></span><br><span class="line">  InitBoard( OB_READY );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Display information about this device</span></span><br><span class="line">  zmain_dev_info();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Display the device info on the LCD */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LCD_SUPPORTED</span></span><br><span class="line">  zmain_lcd_init();   <span class="comment">//初始化LCD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WDT_IN_PM1</span></span><br><span class="line">  <span class="comment">/* If WDT is used, this is a good place to enable it. */</span></span><br><span class="line">  WatchDogEnable( WDTIMX );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  osal_start_system(); <span class="comment">//从这里开始运行</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// Shouldn&#x27;t get here.</span></span><br><span class="line">&#125; <span class="comment">// main()</span></span><br></pre></td></tr></table></figure><p>可以看出，在初始化之后真正开始运行程序的是<code>osal_start_system();</code>函数，所以从这里开始追踪。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      osal_start_system</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This function is the main loop function of the task system (if</span></span><br><span class="line"><span class="comment"> *   ZBIT and UBIT are not defined). This Function doesn&#x27;t return.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   void</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">osal_start_system</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined ( ZBIT ) &amp;&amp; !defined ( UBIT )</span></span><br><span class="line">  <span class="keyword">for</span>(;;)  <span class="comment">// Forever Loop</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#123;</span><br><span class="line">    osal_run_system();  <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在osal_start_system里只调用了这个函数。所以继续跟踪</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      osal_run_system</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     此函数将遍历OSAL taskEvents表，并为发现至少有一个事件挂起</span></span><br><span class="line"><span class="comment"> *     的第一个任务调用task_event_processor（）函数。 如果没有</span></span><br><span class="line"><span class="comment"> *     待处理的事件（所有任务），则此功能可使处理器进入休眠状态。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   void</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">osal_run_system</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint8 idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  osalTimeUpdate();</span><br><span class="line">  Hal_ProcessPoll();<span class="comment">//UART轮询函数 </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tasksEvents[idx])        <span class="comment">//任务是已准备好的最高优先级。</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;                     <span class="comment">//得到待处理的最高任务号 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (++idx &lt; tasksCnt);    <span class="comment">//这里的taskCnt是一个const uint8 任务总数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (idx &lt; tasksCnt)</span><br><span class="line">  &#123;</span><br><span class="line">    uint16 events;</span><br><span class="line">    halIntState_t intState;      <span class="comment">//typedef unsigned char </span></span><br><span class="line"></span><br><span class="line">    HAL_ENTER_CRITICAL_SECTION(intState); <span class="comment">//进入临界区</span></span><br><span class="line">    events = tasksEvents[idx];   <span class="comment">//将task号变成事件号</span></span><br><span class="line">    tasksEvents[idx] = <span class="number">0</span>;        <span class="comment">//将数组中的事件号改成0表明任务正在处理</span></span><br><span class="line">    HAL_EXIT_CRITICAL_SECTION(intState);  <span class="comment">//退出临界区</span></span><br><span class="line"></span><br><span class="line">    activeTaskID = idx;          <span class="comment">//正在处理的事件的事件号</span></span><br><span class="line">    events = (tasksArr[idx])( idx, events ); <span class="comment">//真正将事件号放入了事件的结构数组taxksArr[]</span></span><br><span class="line">    activeTaskID = TASK_NO_TASK;</span><br><span class="line"></span><br><span class="line">    HAL_ENTER_CRITICAL_SECTION(intState);  <span class="comment">//进入临界区</span></span><br><span class="line">    tasksEvents[idx] |= events;  <span class="comment">// 返回未处理的事件</span></span><br><span class="line">    HAL_EXIT_CRITICAL_SECTION(intState);   <span class="comment">//推出临界区</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined( POWER_SAVING )</span></span><br><span class="line">  <span class="keyword">else</span>  <span class="comment">// Complete pass through all task events with no activity?</span></span><br><span class="line">  &#123;</span><br><span class="line">    osal_pwrmgr_powerconserve();  <span class="comment">// Put the processor/system into sleep</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Yield in case cooperative scheduling is being used. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (configUSE_PREEMPTION) &amp;&amp; (configUSE_PREEMPTION == 0)</span></span><br><span class="line">  &#123;</span><br><span class="line">    osal_task_yield();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过阅读源码和注释，我们知道，这个函数主要就是将任务列表<code>tasksEvents</code>中第<code>idx</code>号任务放入事件<code>event</code>中转化为<code>tesksEvents</code>进行处理。在这里有一个<code>tasksArr[idx]</code>，这个数组很关键，我们之后会提到他。但是首先我们需要知道这个<code>idx</code>号与任务是如何对应的呢？这就还要看回main中的<code>osal_init_system();</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      osal_init_system</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This function initializes the &quot;task&quot; system by creating the</span></span><br><span class="line"><span class="comment"> *   tasks defined in the task table (OSAL_Tasks.h).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   void</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  SUCCESS</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">uint8 <span class="title">osal_init_system</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// Initialize the Memory Allocation System</span></span><br><span class="line">  osal_mem_init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the message queue</span></span><br><span class="line">  osal_qHead = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the timers</span></span><br><span class="line">  osalTimerInit();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the Power Management System</span></span><br><span class="line">  osal_pwrmgr_init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the system tasks.</span></span><br><span class="line">  osalInitTasks();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setup efficient search for the first free block of heap.</span></span><br><span class="line">  osal_mem_kick();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ( SUCCESS );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中与系统任务中有关系的只有一个函数<code>osalInitTasks();</code>，我们直接进入这里看看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      osalInitTasks</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief   This function invokes the initialization function for each task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   void</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">osalInitTasks</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint8 taskID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  tasksEvents = (uint16 *)osal_mem_alloc( <span class="keyword">sizeof</span>( uint16 ) * tasksCnt); <span class="comment">//分配内存返回缓冲区指针</span></span><br><span class="line">  osal_memset( tasksEvents, <span class="number">0</span>, (<span class="keyword">sizeof</span>( uint16 ) * tasksCnt)); <span class="comment">//设置所分配内存空间单元值0</span></span><br><span class="line"></span><br><span class="line">  macTaskInit( taskID++ ); <span class="comment">//macTaskInit(0) ，用户不需考虑</span></span><br><span class="line">  nwk_init( taskID++ ); <span class="comment">//nwk_init(1)，用户不需考虑</span></span><br><span class="line">  Hal_Init( taskID++ ); <span class="comment">//Hal_Init(2) ，用户需考虑</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined( MT_TASK )</span></span><br><span class="line">  MT_TaskInit( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  APS_Init( taskID++ );  <span class="comment">//APS_Init(3) ，用户不需考虑</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ( ZIGBEE_FRAGMENTATION )</span></span><br><span class="line">  APSF_Init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  ZDApp_Init( taskID++ ); <span class="comment">//ZDApp_Init(4) ，用户需考虑</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )</span></span><br><span class="line">  ZDNwkMgr_Init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  Smart_home_Init( taskID ); <span class="comment">//用户任务初始化用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从这个函数中可见，在这里<code>taskID</code>进行了初始化，每初始化一个<code>taskID++</code>，其中<code>Hal_Init</code>和<code>Smart_Home_Init</code>是用户需要考虑的，（第一个可以放传感器的任务，第二个可以初始化应用层的用户任务）</p><p>也就是说，用户处理进程包括串口信息都要在这里形成任务号。那下一步就来看看这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Smart_home_Init</span><span class="params">( uint8 task_id )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  halUARTCfg_t uartConfig;</span><br><span class="line"></span><br><span class="line">  Smart_home_TaskID = task_id;</span><br><span class="line">  Smart_home_RxSeq = <span class="number">0xC3</span>;</span><br><span class="line"></span><br><span class="line">  afRegister( (endPointDesc_t *)&amp;Smart_home_epDesc );</span><br><span class="line"></span><br><span class="line">  RegisterForKeys( task_id );</span><br><span class="line"></span><br><span class="line">  uartConfig.configured           = TRUE;              <span class="comment">// 2x30 don&#x27;t care - see uart driver.</span></span><br><span class="line">  uartConfig.baudRate             = SERIAL_APP_BAUD;</span><br><span class="line">  uartConfig.flowControl          = TRUE;</span><br><span class="line">  uartConfig.flowControlThreshold = SERIAL_APP_THRESH; <span class="comment">// 2x30 don&#x27;t care - see uart driver.</span></span><br><span class="line">  uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  <span class="comment">// 2x30 don&#x27;t care - see uart driver.</span></span><br><span class="line">  uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  <span class="comment">// 2x30 don&#x27;t care - see uart driver.</span></span><br><span class="line">  uartConfig.idleTimeout          = SERIAL_APP_IDLE;   <span class="comment">// 2x30 don&#x27;t care - see uart driver.</span></span><br><span class="line">  uartConfig.intEnable            = TRUE;              <span class="comment">// 2x30 don&#x27;t care - see uart driver.</span></span><br><span class="line">  uartConfig.callBackFunc         = Smart_home_CallBack;</span><br><span class="line">  HalUARTOpen (SERIAL_APP_PORT, &amp;uartConfig);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ( LCD_SUPPORTED )</span></span><br><span class="line">  HalLcdWriteString( <span class="string">&quot;Smart_home&quot;</span>, HAL_LCD_LINE_2 );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  </span><br><span class="line">  ZDO_RegisterForZDOMsg( Smart_home_TaskID, End_Device_Bind_rsp );</span><br><span class="line">  ZDO_RegisterForZDOMsg( Smart_home_TaskID, Match_Desc_rsp );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数中大部分的内容是初始化UART端口，并向LCD显示了<code>Smart_home</code>这样一串字符串。但上面有一个语句值得注意：<code>afRegister( (endPointDesc_t *)&amp;Smart_home_epDesc );</code>在步入这个函数查阅函数说明后发现这个函数是希望利用<code>epDesc</code>（也就是程序中的<code>Smart_home_epDesc</code>）这个指向应用程序端点描述符的指针来注册应用程序端点描述，并返回三个值中的一个（已注册、没有足够的内存来添加描述符、重复的端点）。</p><p>先不要着急了解这句话是什么意思，在<code>Smart_home_Init</code>的最下方还有两句话调用了同一个函数<code>ZDO_RegisterForZDOMsg()</code>，这是一个ZDO层的函数，所谓的ZDO层就是<code>ZigBee Device Object</code>设备对象层，通过端点0使应用程序与其他层通信。<code>ZDO_RegisterForZDOMsg()</code>在相应的任务中注册事件（每个事件智能被成功注册一次），将注册信息通过ZDO_Msg_t的形式加入到链表中，这个链表的头指针在zdoMsgCbs中保留。</p><p>对于上面这两段话我们又见到了一个新名词——-端点，所谓的端点也可以理解为电脑的端口号，一个ZigBee设备中有240个端点，他们共享一个网络地址，程序之间的通信则是通过确认端点号来区分数据是发送给该设备的哪个端点的。</p><p>那么按照这样，我们就找到了从应用层发送消息的路径。由<code>ZDO_RegisterForZDOMsg()</code>绑定然后从<code>afRegister</code>创建事件。这个任务在绑定之后，进入处理池进行处理的又是哪个函数呢？</p><p>这就要回到函数<code>osal_run_system()</code>中了，在这个函数中可以注意到这样几句话</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">activeTaskID = idx;          <span class="comment">//正在处理的事件的事件号</span></span><br><span class="line">events = (tasksArr[idx])( idx, events ); <span class="comment">//真正将事件号放入了事件的结构数组taxksArr[]</span></span><br><span class="line">activeTaskID = TASK_NO_TASK;</span><br></pre></td></tr></table></figure><p>这里使用了一个叫做<code>taskArr[idx]</code>的数组，进入数组定义可以看到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * GLOBAL VARIABLES</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The order in this table must be identical to the task initialization calls below in osalInitTask.</span></span><br><span class="line"><span class="keyword">const</span> pTaskEventHandlerFn tasksArr[] = &#123;</span><br><span class="line">  macEventLoop,</span><br><span class="line">  nwk_event_loop,</span><br><span class="line">  Hal_ProcessEvent,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined( MT_TASK )</span></span><br><span class="line">  MT_ProcessEvent,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  APS_event_loop,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ( ZIGBEE_FRAGMENTATION )</span></span><br><span class="line">  APSF_ProcessEvent,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  ZDApp_event_loop,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )</span></span><br><span class="line">  ZDNwkMgr_event_loop,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  Smart_home_ProcessEvent</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">与Smart_home_Init中事件的对比，注意看事件的顺序</span></span><br><span class="line"><span class="comment">  macTaskInit( taskID++ ); //macTaskInit(0) ，用户不需考虑</span></span><br><span class="line"><span class="comment">  nwk_init( taskID++ ); //nwk_init(1)，用户不需考虑</span></span><br><span class="line"><span class="comment">  Hal_Init( taskID++ ); //Hal_Init(2) ，用户需考虑</span></span><br><span class="line"><span class="comment">#if defined( MT_TASK )</span></span><br><span class="line"><span class="comment">  MT_TaskInit( taskID++ );</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">  APS_Init( taskID++ );  //APS_Init(3) ，用户不需考虑</span></span><br><span class="line"><span class="comment">#if defined ( ZIGBEE_FRAGMENTATION )</span></span><br><span class="line"><span class="comment">  APSF_Init( taskID++ );</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">  ZDApp_Init( taskID++ ); //ZDApp_Init(4) ，用户需考虑</span></span><br><span class="line"><span class="comment">#if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )</span></span><br><span class="line"><span class="comment">  ZDNwkMgr_Init( taskID++ );</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">  Smart_home_Init( taskID ); //用户任务初始化用</span></span><br><span class="line"><span class="comment">  **************************************************************/</span></span><br></pre></td></tr></table></figure><p>这是一个全局变量数组，通过上面的这里面的事件是正好按照之前<code>taskID</code>的顺序排列的。也就是说，我们的任务应该设置在<code>Smart_home_ProcessEvent</code>中。</p><p>这样一来我们的流程也就捋顺了。我在下面放一个流程图来方便大家理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">graph TD </span><br><span class="line">main--初始化系统--&gt;osal_init_system</span><br><span class="line">main--运行系统--&gt;A[osal_run_system]</span><br><span class="line">osal_init_system--初始化任务--&gt;osalInitTasks</span><br><span class="line">osalInitTasks--分配任务号--&gt;C[Smart_home_Init]</span><br><span class="line">C--注册任务端点描述--&gt;afRegister...</span><br><span class="line">C--向下传输并加入链表--&gt;ZDO_RegisterForZDOMsg</span><br><span class="line">A--&gt;idx</span><br><span class="line">A--执行任务队列--&gt;tasksArr</span><br><span class="line">A--执行任务链表--&gt;taskEvents</span><br><span class="line">tasksArr--执行用户任务--&gt;B[Smart_home_ProcessEvents]</span><br><span class="line">C--对应---B</span><br></pre></td></tr></table></figure><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h2><p>经过对代码的阅读我们发现，OSAL的执行过程就是在初始化之后从任务池中查询任务并执行。而用户函数需要做的则是写出自己的函数并将其赋予事件号放入事件池中等待OSAL执行。但我们使用协议栈的时候最重要的就是收发消息。这个又是怎么实现的呢？我们下次分析。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ZigBee协议栈探究—-（一）OSAL&quot;&gt;&lt;a href=&quot;#ZigBee协议栈探究—-（一）OSAL&quot; class=&quot;headerlink&quot; title=&quot;ZigBee协议栈探究—-（一）OSAL&quot;&gt;&lt;/a&gt;ZigBee协议栈探究—-（一）OSAL&lt;/h1&gt;&lt;h2 id=&quot;1-写在前面&quot;&gt;&lt;a href=&quot;#1-写在前面&quot; class=&quot;headerlink&quot; title=&quot;1.写在前面&quot;&gt;&lt;/a&gt;1.写在前面&lt;/h2&gt;&lt;p&gt;由于是毕设的要求，我开始再一次学习ZigBee协议栈。伴随着学的东西越来越多，代码结构也忘得越来越快。所以想把自己学的知识整理到几篇博客中，以方便自己随时翻看。我的记录主要是我学习时的思考历程，所以有些地方可能看着很乱。希望看这篇文章的人谅解。如果我学到的知识能帮助后人入门有些许帮助，对我来讲即是莫大的鼓励。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ZigBee" scheme="http://yokeso.github.io/tags/ZigBee/"/>
    
      <category term="CC2530" scheme="http://yokeso.github.io/tags/CC2530/"/>
    
      <category term="协议栈" scheme="http://yokeso.github.io/tags/%E5%8D%8F%E8%AE%AE%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>NaiveBayes</title>
    <link href="http://yokeso.github.io/2021/01/11/NaiveBayes/"/>
    <id>http://yokeso.github.io/2021/01/11/NaiveBayes/</id>
    <published>2021-01-11T09:30:04.000Z</published>
    <updated>2021-03-09T12:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h2><p>logistic回归：本质是对$p(y|\vec x)$进行建模</p><span id="more"></span><p>贝叶斯公式：求$\vec x$和y的联合概率（联合分布）$p(y|\vec x) = \frac {p(\vec x,y)}{p(\vec x)}$</p><p>判别模型：对$p(y|\vec x)$进行建模，且$\sum_{y}p(y|\vec x)=1$（分类问题）</p><p>生成模型：对$p(\vec x,y)$进行建模，且$\sum_{y}p(\vec x,y)=1$（联合分布）</p><p>决策函数：$\hat y =argmax_cp(\vec x,c)=argmax_cp(c)\prod p(\vec x_i,c)$</p><p>样本修正（拉普拉斯修正）</p><script type="math/tex; mode=display">\breve p(x_i|c)=\frac{|D_{c_i}x_i|+1}{|D_c|+N_i}</script><p>分子加1是为了避免0概率，分母则是为了将第i个特征的可能取值数添加进去</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;朴素贝叶斯&quot;&gt;&lt;a href=&quot;#朴素贝叶斯&quot; class=&quot;headerlink&quot; title=&quot;朴素贝叶斯&quot;&gt;&lt;/a&gt;朴素贝叶斯&lt;/h2&gt;&lt;p&gt;logistic回归：本质是对$p(y|\vec x)$进行建模&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ANNs</title>
    <link href="http://yokeso.github.io/2021/01/11/ANNs/"/>
    <id>http://yokeso.github.io/2021/01/11/ANNs/</id>
    <published>2021-01-11T09:29:06.000Z</published>
    <updated>2021-03-09T12:01:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h2><p>神经网络解决的问题是线性不可分的问题，但线性不可分问题可以拆分为线性运算的组合</p><span id="more"></span><h3 id="1-神经网络结构"><a href="#1-神经网络结构" class="headerlink" title="1.神经网络结构"></a>1.神经网络结构</h3><p>可以将感知机看作是一种单层神经网络，可以解决线性问题</p><p>那么多层感知机就被称为神经网络，用来解决线性不可分问题</p><h3 id="2-模型表示（全链接）"><a href="#2-模型表示（全链接）" class="headerlink" title="2.模型表示（全链接）"></a>2.模型表示（全链接）</h3><p>假设$z_i^{(l)}$是第l层第i个神经单元的的净输入，$a_i^{(l)}$是第l层第i个神经单元的的激活值，$g_l(.)$是第l层的激活函数</p><p>最终模型的表达无法表示，但每一层的均可知：</p><script type="math/tex; mode=display">\vec {z^{(l)}} = (\vec{w^{(l)}})^T\vec{a^{(l-1)}}+\vec{b^{(l)}}</script><p>前向传播：$\vec x =\vec {a^{(0)}}\rightarrow (\vec {z^{(1)}}\rightarrow\vec {a^{(1)}})\rightarrow……\rightarrow(\vec {z^{(l)}}\rightarrow\vec {a^{(l)}}=h_{\vec w,\vec b}(x))$</p><h3 id="3-损失函数（多分类为例）"><a href="#3-损失函数（多分类为例）" class="headerlink" title="3.损失函数（多分类为例）"></a>3.损失函数（多分类为例）</h3><p>设最后一层的激活函数是softmax，即$\vec {a^{(l)}} = softmax(\vec {z^{(l)}})$</p><script type="math/tex; mode=display">J_{\vec w,\vec b}(h_{\vec w,\vec b}(\vec x),\vec y) = -\frac {1}{m} \sum_{i=1}^m \sum_{c=1}^Cy^{(i)}log((h_{\vec w,\vec b}(\vec x^{(i)})_c</script><h3 id="5-优化方法"><a href="#5-优化方法" class="headerlink" title="5.优化方法"></a>5.优化方法</h3><p>1.梯度下降</p><p>2.反向传播</p><h3 id="7-自动梯度计算"><a href="#7-自动梯度计算" class="headerlink" title="7.自动梯度计算"></a>7.自动梯度计算</h3><p>数值微分，符号微分（对公式求导）、自动微分$\Rightarrow$计算图</p><h3 id="8-激活函数"><a href="#8-激活函数" class="headerlink" title="8.激活函数"></a>8.激活函数</h3><p>1.Sigmoid</p><script type="math/tex; mode=display">Sigmoid： h_{\vec \theta}(\vec x) = \frac {1} {1+e^{-{\vec \theta}^T \vec x}}</script><p>2.Softmax</p><script type="math/tex; mode=display">Softmax:h_{\vec \theta}(\vec x) = \frac {e^{-{\vec \theta}_c^T \vec x}} {\sum_{i=1}^Ne^{-{\vec \theta}^T \vec x}}</script><p>3.Relu</p><script type="math/tex; mode=display">Relu(x) = \begin{cases} x& x\geq0\\ 0& x=0 \end{cases}</script><p>4.LeakyRelu</p><script type="math/tex; mode=display">LeakyRelu(x) = \begin{cases} x& x\geq0\\ \delta x& x=0 \end{cases}</script><p>5.swish函数</p><script type="math/tex; mode=display">swish(x) = x\times Sigmoid(\beta x)</script><p>$\beta$是可学习固定参数或者超参数</p><p>6.maxout</p><script type="math/tex; mode=display">maxout(\vec z)=max_{k\in (l,k)}z_k \</script><h3 id="9-卷积神经网络"><a href="#9-卷积神经网络" class="headerlink" title="9.卷积神经网络"></a>9.卷积神经网络</h3><p>全连接NN无法表示局部不变特征（无法胜任图像分类）</p><p>所以需要卷积神经网络来进行扩展，卷积神经网络学习的参数是卷积核的参数</p><p>这里的卷积表示的是直接对位相乘$\vec r = \vec w *\vec x$ </p><p>基本结构：一般由卷积层,polling层（降采样层）和全连接层构成</p><h3 id="10-循环神经网络RNN"><a href="#10-循环神经网络RNN" class="headerlink" title="10.循环神经网络RNN"></a>10.循环神经网络RNN</h3><p>用来处理具有时序的数据</p><script type="math/tex; mode=display">\vec h_t=g(\vec w \vec h_{t-1}+\vec w \vec x_t +\vec b)</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;人工神经网络&quot;&gt;&lt;a href=&quot;#人工神经网络&quot; class=&quot;headerlink&quot; title=&quot;人工神经网络&quot;&gt;&lt;/a&gt;人工神经网络&lt;/h2&gt;&lt;p&gt;神经网络解决的问题是线性不可分的问题，但线性不可分问题可以拆分为线性运算的组合&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
